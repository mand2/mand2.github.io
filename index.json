[
{
	"uri": "/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Chapter 0 About Backend 서버 개발자 고라니입니다.\n 1년차 신입 개발자 JAVA 70% Javascript 20% Python 10% 여러가지 기술에 관심이 많습니다.  "
},
{
	"uri": "/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Spring \rSpring Boot\r\r\r\rspring.jpa.open-in-view 로그 오류 해결하기\r\r\rquerydsl 설정하기\r\r\rmaven 빌드 오류\r\r\r@SpringBootApplication\r\r\r\r회원가입\r\r\r\rsingle-page 회원관리 폼 만들기\r\r\rSpring handler 인터셉터\r\r\rSpring 웹상에서 메일 보내보기\r\r\r회원가입 시 이메일 인증처리\r\r\r메이븐 빌드 및 배포란?\r\r\r\r"
},
{
	"uri": "/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Python \rgetter setter 설정\r\r\r\r\r윈도우에서 Ubuntu로 pycharm 설치할 수 있을까\r\r\r\r\r"
},
{
	"uri": "/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Node.js \rpackage-lock.json 이란?\r\r\r\r\rformidable 설치 오류 해결하기\r\r\r\r\raws EC2로 node.js 배포하기\r\r\r\r\r"
},
{
	"uri": "/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "Chapter 5 React \r데이터 테이블로 정렬하기\r\r\r\r\r테이블을 엑셀로 다운로드\r\r\r\r\rjavascript의 innerHTML과 같은 기능은?\r\r\r\r\r"
},
{
	"uri": "/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": "Chapter 99 Others\u0026hellip; \rBooks\r\r\r\r[책] 오브젝트 (1)\r\r\r\r면접질문 정리\r\r\r\r\r"
},
{
	"uri": "/python/1/",
	"title": "getter setter 설정",
	"tags": ["Python", "TIL"],
	"description": "",
	"content": "Python : getter setter 설정 클래스 내부에서 getter setter 설정 쉽게하기 메서드 낭비하지 않고 쉽게 쓸 수 있다! 불러오는 방법이나 셋하는 방법도 java와 조금 다름. 주의할 것..\n# test.py class Test: def __init__(self, limit=None, persistent=None): if limit is None: self.__limit = False else : self.__limit = limit if persistent is None: self.__persistent = False else : self.__persistent = persistent @property def limit(self): return self.__limit @property def persistent(self): return self.__persistent @limit.setter def limit(self, limit): self.__limit = limit @persistent.setter def persistent(self, persistent): self.__persistent = persistent user = Test() # 값이 None, None 으로 나옴 # set: limit user.limit = True # get: limit  print(user.limit) "
},
{
	"uri": "/react/1/",
	"title": "데이터 테이블로 정렬하기",
	"tags": ["React", "Table", "Sort", "TIL"],
	"description": "",
	"content": "react table 사용하기 목적 원하는 list를 게시판 형식으로 가져온 후, 모든 컬럼을 sorting 하기 위함. 찾아보니 react-bootstrap-table-next 라는 걸 찾음.\n설치과정  react-create-app 사용(git push 후 babel 설정 modify + 그 외 기능들 추가) yarn add react-bootstrap-table-next 명령어로 react-bootstrap-table 설치   public/index.html 파일에 bootstrap CSS 추가해야 함! 이쁘게 보고싶다면 설치!   component에서 css 추가  import \u0026#39;react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\u0026#39;; 결론은 회사에선 쓸 수 없음 ㅠ_ㅠ 기존 css 랑 충돌될 것 같음 ,,\n해결 ! index.html에 부트스트랩css 추가 안해도 됨. 테이블 형식으로 나오긴 하는데, 관련 css는 따로 작성해서 import 처리하면 된다 ㅎ\n출처 react-bootstrap-table2 doc LIVE DEMO 사이트\nApp.js import React, {Component} from \u0026#39;react\u0026#39;; import Table from \u0026#39;./components/table1\u0026#39;; class App extends Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;Table /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default App; table1.js import React, { Component } from \u0026#39;react\u0026#39;; import Table2 from \u0026#34;./table2\u0026#34;; class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;Table2 /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; table2.js import React, { Component } from \u0026#39;react\u0026#39;; import \u0026#39;react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\u0026#39;; import BootstrapTable from \u0026#39;react-bootstrap-table-next\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; class Table2 extends Component{ render(){ const products = [ { id: 0, name: \u0026#39;good\u0026#39;, price: 1000 }, { id: 1, name: \u0026#39;soso\u0026#39;, price: 1500 }, { id: 2, name: \u0026#39;bad\u0026#39;, price: 500 }, { id: 3, name: \u0026#39;good3\u0026#39;, price: 41000 }, { id: 4, name: \u0026#39;soso4\u0026#39;, price: 800 } ]; const columns = [ { dataField: \u0026#39;id\u0026#39;, text: \u0026#39;Product ID\u0026#39;, sort: true },{ dataField: \u0026#39;name\u0026#39;, text: \u0026#39;Product Name\u0026#39;, sort: true },{ dataField: \u0026#39;price\u0026#39;, text: \u0026#39;Product Price\u0026#39;, sort: true } ]; const defaultSorted = [{ dataField: \u0026#39;name\u0026#39;, order: \u0026#39;desc\u0026#39; }]; return( \u0026lt;div\u0026gt; \u0026lt;BootstrapTable keyField=\u0026#39;id\u0026#39; data={ products } columns={ columns } defaultSorted={ defaultSorted } striped hover /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table2; 기본적으로 가져올 때, name을 기준으로 desc형태로 가져옴. 각 컬럼을 누를 떄마다 desc/asc 형태로 된다.\n\u0026lt;BootstrapTable /\u0026gt; 의 필수 요소\n keyField data columns  손쉽게 정렬을 완성할 수 있다!\n"
},
{
	"uri": "/spring/spring-boot/1/",
	"title": "spring.jpa.open-in-view 로그 오류 해결하기",
	"tags": [],
	"description": "",
	"content": "1. 문제상황 : 왜 로그에 warn이 뜨지? 스프링 부트 app을 시작하면 로그가 나오는데,\n잘 보면 아래와 같이 warning 메세지가 뜬다\naWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning\r2. 문제 이유 Spring Boot에서는 spring.jpa.open-in-view를 true로 설정하고 있는데, 이는 OSIV 측면에서 매우 부적절하다고 함. 즉 성능이나 scalability,, 즉 확장성 측면에서 볼 때 false로 해야 하는데 true로 하고 있어 warning 경고 사인이 뜨는 거라고.\n참고 사이트-스택오버플로우-로 바로가기\n3. 해결방안 검색결과 spring.jpa.open-in-view 설정을 true 에서 false로 바꿔주면 해결된다.\n바꿔주는 방법은 크게 두 가지 방법이 있다.\n application.properties에서 설정하기  spring.jpa.open-in-view=false   application.yml으로 설정 설정\n yaml으로 설정하는 방법은 여기에서 잘 설명하고 있다.\n관련 스프링 부트 doc 사이트로 가기\n   "
},
{
	"uri": "/node.js/1/",
	"title": "package-lock.json 이란?",
	"tags": ["node.js", "TIL"],
	"description": "",
	"content": "package-lock.json 파일이란? 프로젝트에 설치된 노드 모듈들의 의존성 트리를 기록하고 있음.\npackage-lock.json이 유용한 이유? git 저장소에 node.js 프로젝트를 커밋할 때 보통 node_modules 폴더는 부피가 커서 commit에 포함시키지 않습니다.이 때 package-lock.json 파일은 꼭 함께 커밋을 해주어야 합니다. 다른 팀원이 이 프로젝트를 처음 pull 받아서 npm install 을 했을 때 개발 당시의 동일한 버전의 모듈들이 설치됨을 보장하기 위함입니다. express 모듈을 프로젝트에 설치하게 되면 package.json 파일에 \u0026quot;express\u0026quot;: \u0026quot;~4.16.1\u0026quot; 처럼 Tilde Ranges 표기법으로 버전이 명시됩니다. 4.16.1 버전보다 높은 버전이 npm에 publish 된다면 node install 명령어로 로컬에 모듈을 설치하면 더 높은 버전의 express 모듈이 로컬에 설치가됩니다. 이는 개발당시의 버전과 달라져 예기치 않던 버그가 발생할 수 있습니다. 따라서 package-lock.json은 의존성 관리를 위해 필수이며 꼭 git 저장소에 commit 해야하는 대상입니다.\n 출처: https://simsi6.tistory.com/56 [곰돌푸우]\n"
},
{
	"uri": "/spring/user_register/1/",
	"title": "single-page 회원관리 폼 만들기",
	"tags": [],
	"description": "",
	"content": "  single page : CRUD(가입+수정+삭제+리스트 보여주기)를 Single page 처리 REST API 이용   개발순서 (MVC 2 패턴으로 함)\n DAO설정\nController\nService\nView\n 참고사항\n REST API 연습용입니다.\n기존에 사용하던 코드를 재활용하였으므로, 변수명의 차이가 있을 수 있습니다. 회원정보 수정에서의 parametertype 문제\nMap으로 설정해야 하나,\n빠르게 제작하기 위하여 model(DTO)인 EditMember를 parameter로 설정함. 회원가입시 not null 조건인 ID, PW, NAME만 기입하도록 하였습니다.  결과화면\n회원가입화면\n회원수정화면\n DAO 설정 //인터페이스 작성 public interface MemberDao { public Member selectById(String id) ; //회원한명의 정보가져오기(login + update ) \tpublic int deleteMember(int idx) ; //삭제 \t/* Rest Api를 위한 메서드 */ public List\u0026lt;Member\u0026gt; selectAllList(); public int insertMem(Member member); public int updateMem(Member member); //업데이트 수정 } \u0026lt;!-- mapper.xml 작성 --\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.ny.mm.dao.MemberDao\u0026#34;\u0026gt; \u0026lt;!-- SQL의 컬럼명과 객체의 변수명(field)이 다르므로 resultMap을 통해 호환가능하도록 만듬 --\u0026gt; \u0026lt;resultMap type=\u0026#34;com.ny.mm.model.member.Member\u0026#34; id=\u0026#34;MemberVO\u0026#34;\u0026gt; \u0026lt;result property=\u0026#34;idx\u0026#34; column=\u0026#34;idx_m\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;id\u0026#34; column=\u0026#34;id\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;pw\u0026#34; column=\u0026#34;pw\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;name\u0026#34; column=\u0026#34;name\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;photo\u0026#34; column=\u0026#34;photo\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;regDate\u0026#34; column=\u0026#34;regdate\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;phone\u0026#34; column=\u0026#34;phone\u0026#34;/\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- 회원한명의정보가져오기 --\u0026gt; \u0026lt;select id=\u0026#34;selectById\u0026#34; resultMap=\u0026#34;MemberVO\u0026#34; \u0026gt; select * from moonchild.member where id = #{id} \u0026lt;/select\u0026gt; \u0026lt;!-- 회원삭제 --\u0026gt; \u0026lt;delete id=\u0026#34;deleteMember\u0026#34;\u0026gt; delete from moonchild.member where idx_m = #{idx} \u0026lt;/delete\u0026gt; \u0026lt;!-- 회원리스트가져오기 --\u0026gt; \u0026lt;select id=\u0026#34;selectAllList\u0026#34; resultMap=\u0026#34;MemberVO\u0026#34;\u0026gt; select * from moonchild.member order by regdate desc \u0026lt;/select\u0026gt; \u0026lt;!-- 회원가입 --\u0026gt; \u0026lt;insert id=\u0026#34;insertMem\u0026#34; parameterType=\u0026#34;com.ny.mm.model.member.Member\u0026#34;\u0026gt; insert into moonchild.member (ID, PW, NAME) values (#{id}, #{pw}, #{name}) \u0026lt;/insert\u0026gt; \u0026lt;!-- 회원정보수정 --\u0026gt; \u0026lt;update id=\u0026#34;updateMem\u0026#34; parameterType=\u0026#34;com.ny.mm.model.member.EditMember\u0026#34;\u0026gt; update moonchild.member set name = #{name}, pw = #{pw} where idx_m = #{idx} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; Controller 설정  pw는 JsonIgnore로 설정되어 있음. /rest-api/members 공통 URI 설정 CRUD 설명  /rest-api/members method: GET 리스트 보여주기 /rest-api/members method: POST 회원가입 /rest-api/members/{id} method: GET 해당 아이디의 회원정보 보여주기(수정을 위함) /rest-api/members method: PUT 회원정보 수정 /rest-api/members/{idx} method: DELETE 회원 삭제(탈퇴)    회원수정(service, controller, DTO 등) 설명 회원수정이 가장 까다로웠으므로, REST API Controller 중 회원수정과 관련된 것(service와 controller, model 등)만 올립니다.\nservice @Autowired private SqlSessionTemplate template; private MemberDao dao; //수정할 멤버 가져오기 \tpublic Member select(String id) { dao = template.getMapper(MemberDao.class); Member member = dao.selectById(id); return member; } //해당멤버의 정보 변경 \tpublic int editRest(EditMember edit) { dao = template.getMapper(MemberDao.class); int result = 0; Member member = edit.toMemberRest(); result = dao.updateMem(member); return result; } controller @Controller @RequestMapping(\u0026#34;/rest-api/members\u0026#34;) public class RestApiController { @Autowired private memEditService editService; //수정:회원정보가져오기 \t@CrossOrigin @ResponseBody @RequestMapping(value = \u0026#34;/{id}\u0026#34;, method = RequestMethod.GET) public Member geteditMember(@PathVariable(\u0026#34;id\u0026#34;) String id) { return editService.select(id); } //회원수정 \t@CrossOrigin @ResponseBody @RequestMapping(method = RequestMethod.PUT) public int editMember(@RequestBody EditMember edit) { return editService.editRest(edit); } }    @Contoroller RestApiController 를 controller로 인식하도록 어노테이션 설정.     @CrossOrigin client와 server를 분리할 때 발생할 수 있는 크로스도메인 이슈를 해결하기 위한 설정. 해당 이슈는 서버측에서 해결하는 게 보편적이라 함. client가 요청하는 위치가 달라도 해당 메서드를 사용할 수 있도록 한다.    RequestParam 과 PathVariable\n RequestParam 은 naver.com/search?page=12와 같이 URL 자체에 전달된 parameter를 호출\nPathVariable 은 naver.com/search/index/1REST API에서 값을 호출할 때 사용\n RequestMapping의 value = \u0026ldquo;{ 템플릿변수 }\u0026ldquo;의 템플릿 변수와 @PathVariable 어노테이션에서 불러오는 템플릿 변수는 동일한 이름(변수명)을 갖는다. 해당 템플릿변수를 불러와 변수로 사용가능!     view //수정버튼 클릭시 실행(수정할 멤버의 정보 가져오기) function edit(id) { if(confirm(\u0026#39;정말 수정할거야?????리얼리????\u0026#39;)){ $.ajax({ url:\u0026#39;http://localhost:8080/mc/rest-api/members/\u0026#39;+id, type: \u0026#39;GET\u0026#39;, error: function() { alert(\u0026#39;error.....\u0026#39;); list(); }, success: function(data) { //alert(data.idx);  $(\u0026#39;#join\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;none\u0026#39;); //가입폼 안보이게 하고  $(\u0026#39;#edit\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;block\u0026#39;); //수정폼 보이게  var output = \u0026#39;\u0026#39;; output += \u0026#39;아이디는안바꿔줘\u0026#39; output += \u0026#39;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;\u0026#39;+data.id +\u0026#39;\u0026#34; disabled\u0026gt;\u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;패스워드는?????? \u0026#39;; output += \u0026#39;\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pw2\u0026#34; name=\u0026#34;pw\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;이름 좀 알려줄래?\u0026#39;; output += \u0026#39;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name2\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;\u0026lt;span class=\u0026#34;submit\u0026#34; onclick=\u0026#34;getEdit(\u0026#39;+data.idx+\u0026#39;)\u0026#34;\u0026gt;\u0026#39;; output += \u0026#39;수정할래요오오오옹!\u0026lt;/span\u0026gt;\u0026#39;; $(\u0026#39;#editForm\u0026#39;).html(output); } }); } } //수정할래요오오오옹! 이라는 버튼을 클릭 할 때 (== 수정 update 전송 버튼) function getEdit(idx) { $.ajax({ url:\u0026#39;http://localhost:8080/mc/rest-api/members\u0026#39;, type: \u0026#39;PUT\u0026#39;, data: JSON.stringify({ idx: idx, pw : $(\u0026#39;#pw2\u0026#39;).val(), name : $(\u0026#39;#name2\u0026#39;).val() }), contentType: \u0026#39;application/json;charset=utf-8\u0026#39;, dataType: \u0026#39;json\u0026#39;, success: function(data) { if(data \u0026gt; 0 ){ alert(\u0026#39;수정되었습니다\u0026#39;); } else { alert(\u0026#39;실-패\u0026#39;); } }, error: function(){ alert(\u0026#39;error ㅠㅠㅠㅠ\u0026#39;); }, complete: function() { list(); $(\u0026#39;#edit\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;none\u0026#39;); $(\u0026#39;#join\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;block\u0026#39;); } }); } TIL   complete  를 쓰면 성공/에러에 상관없이 실행함.\n가독성이 좋아짐!\n순서는 success - complete 혹은 error - complete 순. edit 에서는 controller에서 Member 타입으로 받아오기 때문에 data.id 와 같이 get메서드를 호출 할 수 있다. getEdit 은 result값을 int 타입으로 받도록 만들어 success 에서 바로 체크하도록 함.   추가: EditMember public class EditMember { /** * 참고로 REST-API에서만 사용하는 변수/메서드만 편집하여 올림 * getter setter 설정하였음. */ private int idx; private String id; private String pw; private String name; public Member toMemberRest() { Member member = new Member(); member.setIdx(idx); member.setPw(pw); member.setName(name); return member; } } "
},
{
	"uri": "/about/portfolio/",
	"title": "Portfolio",
	"tags": [],
	"description": "",
	"content": "portfolio created in Oct, 2019.\n"
},
{
	"uri": "/python/2/",
	"title": "윈도우에서 Ubuntu로 pycharm 설치할 수 있을까",
	"tags": ["Python", "TIL"],
	"description": "",
	"content": "PyCharm 설치 ? 어쩌다보니(?)는 아니고, 자발적으로 파이썬 관련 업무를 맡게 되었다. 나아아-름 서버개발자라 윈도우 컴퓨터를 쓴다고 할지라도 리눅스 환경 + 가상환경으로 파이썬 개발을 하고자 했다. 오늘은 그 대서사시의 첫시작(\u0026hellip;)을 써보려고 한다.\n1. Ubuntu 18.04 1-1 설치방법(INSTALL)   windows - app 에서 설치\n  프로그램 설정 : 리눅스 허용 체크\n  Ubuntu 에서 user \u0026amp;\u0026amp; pw 설정\n  Ubuntu distro 세팅\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade   1-2 결과 WSL로 pycharm 세팅하려 했지만, snap 을 지원하지 않는다고 하여 실패.\n그럼 Ubuntu로 pycharm 설치하는 다른 방법이 없느냐?! 하면 있긴 있다. 그런데 stackoverflow에서 배포할 수 없다는 글을 봤다. pycharm이 interpreter 세팅을 할 때 remote 로만 인식하게 되기 때문이라고.\n Configuring PyCharm PyCharm should be configured to use WSL as a remote interpreter but without deployment, since each drive on Windows is mapped to an appropriate folder in /mnt/\u0026lt;DRIVE_NAME\u0026gt; in WSL. So, you only need to configure the mapping. For remote interpreters, see configuration-remote-python-interpreters . You should use 127.0.0.1 as hostname, and login and password you entered after first lxrun /install. You also should set C:\\ to /mnt/c/ in your mappings. See the video from the previous post. 전문 URL\n 2. VSCode 우회하는 방법으로 Microsoft의 Visual Studio Code로 파이썬 설치하여 해봤음\n 장점  같은 회사에서 만든거라 연결하기는 간편함 python extention만 설치하면 되어 쉽다 여러 버전을 설치 후, bash 파일에서 alias 등록해서 사용하기도 쉽다 (리눅스니까,,)   단점  정말 여러가지 단점이 있지만 가장 극강은,,, VSCODE 자체의 에러 1 : setting.json 파일이 어찌나 여러 장소에 있는지\u0026hellip; 환경 설정 맞추다가 시간 다 감. 그리고 vscode는 1폴더 = 1프로젝트 라는 그지같은 공식이 있다. 이 공식을 없애려고 환경설정 여러가지로 했는데, 뭔가 꼬였는지 안됨. 결국 원인을 못찾고(남탓ㅋ) 하드코딩해버림,, path 설정을 각 파일마다 해줘야해서 귀찮음. VSCODE의 자체의 에러 2 : test or debug 에러. vscode의 github 이슈트래커를 봤는데, 관련 질문이 너어어어어어무 많음. vscode가 제대로 F/U을 하고있는지 의문이다. 답변으로는 해결했다고 하는데 바로 다음 답글로 안되는데? 가 달린다 ㅋㅋ 나도 따라해보다가 더 꼬여서 어디서부터 해결해야할지.. 에러가 난무하는 나의 vscode파이썬 환경설정\u0026hellip;   결론 python을 할거면, vscode는 시간낭비! 라는게 나의 결론. 물론 인텔리제이를 비롯한 프로젝트 별로 환경설정을 (비교적) 쉽게 할 수 있는 IDE에 물들어버린 탓도 있겠지만 vscode는 설정 에러가 너무 많아서(예상보다도 더) 시간 낭비하게 된다. 그래서 결국 pycharm을 찾았고\u0026hellip; 찾았으며\u0026hellip; 또 나는 jetbrain의 노예가 되었다\u0026hellip;  결론 윈도우 + WSL (Ubuntu 18.04) + Pycharm은 귀찮고, 아닌걸로. 그래서 window 용 파이참과 윈도우용 가상환경 파일을 설치해버렸다. ㅎ ㅏ\u0026hellip; 나의 원대한 꿈이 이렇게 막을 내리다니 😥\n그래서 1년 안에 맥을 구매하는 걸 목표로 했다. (돈을 모을 수 있을지 의문이긴 함) 답답해서 못해먹겠다싶고. 요즘들어 리눅스 환경에 관심이 생겼는데 윈도우에서는 뭔가 제약사항이 많다. 물론 내가 더 좋은 개발자라면 연장 탓을 안하겠지만 ㅎㅎ 아직 만 1년도 안되었으니 ㅎㅎㅎ 장비 탓을 하겠다!\n"
},
{
	"uri": "/react/2/",
	"title": "테이블을 엑셀로 다운로드",
	"tags": ["React", "Table", "Excel", "TIL"],
	"description": "",
	"content": "excel download 만들기 목적 전체 리스트를 테이블로 출력한 후, 화면에 보여지는 부분을 엑셀 형식으로 다운로드 가능하게 만들어 보자. 다운로드 창이 나오고, 다운로드 시 해당 파일명을 자동으로 설정까지 해주기!\nSpec  react.js ^16.8.6 mobx ^5.13.0  사실 구글에 검색하면 잘 나온다..(검색어 : Export html table data to Excel using JavaScript) 나는 그 글을 긁어왔을 뿐ㅎㅎ,, 다른 방법으로도 가능한데, 지금 내가 구현한 부분은 서버에 과부하를 생성하지 않도록 현재 화면에서 보여지는 것만 엑셀로 출력하도록 만든것임. 현재 화면 뿐만 아니라 전체 리스트를 다 갖고오고 싶다면 다른 방법을 써야 한다.\n01 Store.js @action download() { const table = document.getElementsByTagName(\u0026#39;table\u0026#39;)[0]; let tab_text = \u0026#39;\u0026lt;html xmlns:x=\u0026#34;urn:schemas-microsoft-com:office:excel\u0026#34;\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;head\u0026gt;\u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;application/vnd.ms-excel; charset=UTF-8\u0026#34;\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;xml\u0026gt;\u0026lt;x:ExcelWorkbook\u0026gt;\u0026lt;x:ExcelWorksheets\u0026gt;\u0026lt;x:ExcelWorksheet\u0026gt;\u0026#39; tab_text += \u0026#39;\u0026lt;x:Name\u0026gt;Test Sheet\u0026lt;/x:Name\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;x:WorksheetOptions\u0026gt;\u0026lt;x:Panes\u0026gt;\u0026lt;/x:Panes\u0026gt;\u0026lt;/x:WorksheetOptions\u0026gt;\u0026lt;/x:ExcelWorksheet\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;/x:ExcelWorksheets\u0026gt;\u0026lt;/x:ExcelWorkbook\u0026gt;\u0026lt;/xml\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;; tab_text += \u0026#34;\u0026lt;table border=\u0026#39;1px\u0026#39;\u0026gt;\u0026#34;; let exportTable = table.cloneNode(true); tab_text += exportTable.outerHTML; tab_text += \u0026#39;\u0026lt;/table\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;; let data_type = \u0026#39;data:application/vnd.ms-excel\u0026#39;; let ua = window.navigator.userAgent; let msie = ua.indexOf(\u0026#34;MSIE \u0026#34;); let fileName = this.period + \u0026#39;_Table\u0026#39; + \u0026#39;.xls\u0026#39;; // browser 처리  if (msie \u0026gt; 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) { //ie 용  if (window.navigator.msSaveBlob) { let blob = new Blob([tab_text], { type: \u0026#34;application/csv;charset=utf-8;\u0026#34; }); navigator.msSaveBlob(blob, fileName); } } else { //그외  let blob2 = new Blob([tab_text], { type: \u0026#34;application/csv;charset=utf-8;\u0026#34; }); let filename = fileName; let elem = window.document.createElement(\u0026#39;a\u0026#39;); elem.href = window.URL.createObjectURL(blob2); elem.download = filename; document.body.appendChild(elem); elem.click(); document.body.removeChild(elem); } } 02 Component.js import React, {Component} from \u0026#39;react\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; @inject(stores =\u0026gt; ({ store: stores.Store; })) @observer class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;button\u0026gt; \u0026lt;div onClick={ ()=\u0026gt; store.download() }\u0026gt;엑셀다운로드\u0026lt;/div\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; "
},
{
	"uri": "/spring/spring-boot/2/",
	"title": "querydsl 설정하기",
	"tags": [],
	"description": "",
	"content": "1. QueryDSL 을 선택한 이유? 스프링 부트 + JPA 를 선택하면서 고민했던 사항이 테이블 연결이었다.\nJPQL로 간단하게 쿼리문을 불러오는 것이 아닌, 내가 원하는 쿼리문을 사용하기 어렵다는 문제점 때문이었다.\n많은 블로그에서 탐색한 결과, QueryDsl을 선택하였다. 비교적 직관적이며, join 중에서도 left outer join / right outer join 등 다양한 조인과 동적쿼리문 작성이 가장 좋아보였다. 사실은 criteriaBuilder를 사용할까 했는데 QueryDsl이 더 직관적이라 선택하였다. 조금 더 보기 편하달까.. 생각보다 많은 레퍼런스와 doc(문서)가 있고, 심지어 한글로 문서번역이 되어있어 편했다. maven 설정할 때 조금 애먹긴 했지만..\n2. maven 설정 레퍼런스에서는 gradle로 설정하는 방법이 많이 있는데 아직 초보개발자인 나로서는 (=배운 지식 활용하기에도 벅찬,,) 감수할 수 없는 위험이라 판단, 조금 더 친숙한 maven으로 dependency를 설정하였다.\n2-1 dependency 설정 \u0026lt;!-- querydsl --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.querydsl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;querydsl-apt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${querydsl.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.querydsl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;querydsl-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${querydsl.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2-2 plug-in 설정 \u0026lt;!-- querydsl plugin --\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.mysema.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;apt-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.3\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;process\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;outputDirectory\u0026gt;target/generated-sources/java\u0026lt;/outputDirectory\u0026gt; \u0026lt;processor\u0026gt;com.querydsl.apt.jpa.JPAAnnotationProcessor\u0026lt;/processor\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; 3. 플러그인 추가시 문제점 발생 플러그인을 추가할때 부분에서 에러가 발생했다.\n오류메세지는 You need to run build with JDK or have tools.jar on the classpath.\n!!주의!! 이 오류메세지가 뜨면 QClass 자체가 생성이 안되어 QueryFactory 사용 자체를 할 수가 없게된다.\nQClass란? QueryDsl에서 제공하는 클래스. 도메인(repository) 클래스가 자동으로 QClass로 변환되며(target/generated-sources/java 패키지에 자동 생성) 이 클래스를 QueryFactory에 주입하여 사용하게 된다.\n4. 문제점 해결 해결방법은 생각보다 간단하다.\n  이클립스 설치경로 혹은 STS 설치경로에 eclipse.ini 혹은 STS.ini 파일을 연다\n  아래의 두 줄을 추가하면 됨. 주의할 점은 -vmargs 설정 전에 써줘야 한다.\n-vm\rC:\\Program Files\\Java\\jdk1.8.0_211\\bin\\javaw.exe\r생각없이 사람들이 쓴 걸 복붙했는데 \\ 대신에 /로 루트설정이 되어있어서 sts실행 자체가 안되었었다. 사소한 부분이지만 루트는 역슬래쉬..!!\n  STS실행\n  해당 프로젝트 우클릭 \u0026gt; maven \u0026gt; Update Project.. 클릭하고 메이븐업데이트 및 클린 시키면 된다 !\n  "
},
{
	"uri": "/node.js/2/",
	"title": "formidable 설치 오류 해결하기",
	"tags": ["node.js", "TIL"],
	"description": "",
	"content": "위와 같이 npm에 formidable을 설정하려고 하니 package.json이 없다고 뜸\npackage.json은 해당 프로젝트 의존모듈 관리를 도와주기 때문에 설치해야 한다.정리:: npm 이란? node package manager : 모듈관리매니저\n1. 해당 프로젝트 디렉토리로 들어감 cd D:\\node\\nodeJS_test\r2. npm init 을 써준다 npm init -y\r위의 이미지를 보면, package.json내부에 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 스펙을 볼 수 있다. 이 package.json을 통해 모듈 의존성 모듈 관리도 진행할 수 있다. 만약 어떤 오픈 소스를 다운 받을 때 이 package.json만 있다면 해당 오픈 소스가 의존하고 있는 모듈이 어떤 것인지. 그리고 그 모듈들을 아래 명령어로 한 번에 설치할 수 있다.3. formidable 설치 npm install formidable\r"
},
{
	"uri": "/spring/user_register/2/",
	"title": "Spring handler 인터셉터",
	"tags": [],
	"description": "",
	"content": "필터와 인터셉터의 실행시기 차이? 실행시점은 차이가 있음\n인터셉터 중 핸들러인터셉터는 필터의 일종이긴 하나, 요청컨트롤러가 있고 확인이 된 후에 실행(컨트롤러 요청 전후) 됨\n핸들러 인터셉터 핸들러 인터셉터는 DispatcherServlet 이 컨트롤러를 호출하기 전과 후에 요청과 응답을 참조하거나 가공할 수 있는 일종의 필터\n필터와 인터셉터의 자세한 차이를 알고싶다면 여기로\nHandlerInterceptor 어떻게 쓸까? HandlerInterceptorAdaptor 클래스를 상속받은 뒤, 자신이 원하는 메서드만 오버라이딩하면 된다.\n~'Adaptor'가 붙어있는 클래스\r인터페이스 구현체이나, 안에 내용이 없음. 내가 구현하고자 하는 메서드만 재구성하면 됨. 즉 구현하지 않아도 될 메서드들은 구현하지 않음! 번거로움이 줄어든다.\r  HandlerMapping에 인터셉터 설정 (servlet-context.xml 에 등록)\n  Interceptor 실행순서?\npreHandle: HandlerMapping에 등록된 순서대로 실행\npostHandle: 등록 순서와 역순으로 실행\n  view 렌더링 한 후: \u0026lsquo;Interceptor 처리 완료 후\u0026rsquo; 혹은 \u0026lsquo;뷰 생성 후\u0026rsquo;라 할 수 있으며, 등록된 순서의 반대로 afterCompletion() 실행\n  1. servlet-context.xml 에 등록 \u0026lt;!-- interceptor 등록 --\u0026gt; \u0026lt;interceptors\u0026gt; \u0026lt;interceptor\u0026gt; \u0026lt;mapping path=\u0026#34;/member/mypage/**\u0026#34;/\u0026gt; \u0026lt;exclude-mapping path=\u0026#34;/member/mypage/help\u0026#34;/\u0026gt; \u0026lt;beans:bean class=\u0026#34;com.ny.mm.interceptor.AuthCheckInterceptor\u0026#34; /\u0026gt; \u0026lt;/interceptor\u0026gt; \u0026lt;/interceptors\u0026gt; 2. interceptor class 등록  목표:\n세션에 loginInfo 속성이 존재하면 return true 해주기\n public class AuthCheckInterceptor extends HandlerInterceptorAdapter { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //\t1. 현재 요청에서 세션객체 받기  HttpSession session = request.getSession(false); //\t2. loginInfo가 저장되어있는지,,  if(session != null \u0026amp;\u0026amp; session.getAttribute(\u0026#34;loginInfo\u0026#34;) != null) { return true; } //context 경로 지정해줘야한다.  response.sendRedirect(request.getContextPath() + \u0026#34;/login/form\u0026#34;); return false; } } 3. VIEW 등록 (jsp) \u0026lt;%@ page language=\u0026quot;java\u0026quot; contentType=\u0026quot;text/html; charset=UTF-8\u0026quot;\rpageEncoding=\u0026quot;UTF-8\u0026quot;%\u0026gt;\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Insert title here\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;삐용삐용!!!!!!!!!!!! null pointer exception 발생!!!!!!!!!!!!\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r4. 결과페이지 확인 ![결과페이지]({{ /images/Spring/2_1.jpg }})\n"
},
{
	"uri": "/react/3/",
	"title": "javascript의 innerHTML과 같은 기능은?",
	"tags": ["React", "TIL"],
	"description": "",
	"content": "리액트의 innerHTML 은 ? 목적 String으로 tag를 다 만들어서 컴포넌트에 넣고 싶은데, 왜 태그 인식이 안될까요,,, 에서 시작되었다. 호출할 컴포넌트에 String으로 넣어주면 알아서 될 줄 알았건만.. 변환이 안되어서 innterHTML도 써보고 여러가지 해봤는데 리액트는 기본적으로 innterHTML 자체를 인식하지 못한다고 한다.\n그러면 뭘 인식하져? 라고하면 아래의 글을 읽으면 됩니다 :-)\nHOW TO dangerouslySetInnerHTML 이라는 걸 태그 내부에 설정해주면 된다.\n01 Store.js /** ------------------------------------------------ * String 으로 받은 메세지 내부 html 형식으로 변환 * * ------------------------------------------------*/ setDetails(){ return {__html: `${this.message}`}; } @computed get showDetails(){ return( \u0026lt;div dangerouslySetInnerHTML={this.setDetails()} /\u0026gt; ); } 02 Component.js import React, {Component} from \u0026#39;react\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; @inject(stores =\u0026gt; ({ store: stores.Store; })) @observer class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; {store.showDetails} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; 질문! 왜 컴포넌트에서 store.showDetails 라고 하죠? 뒤에 () 를 왜 안쓰져..? 라고 하면 렌더링 하기 전부터 주입되어있는 상태라 가능함..으로 이해했다.(아니면 알려주세요) () 로 쓰면 function으로 인식되고, 내 기억상 에러가 났던 걸로 기억됨. 그리고 다른 메세지를 클릭해도 처음 클릭한 메세지가 계속 떠서 렌더링이 안되었다.\n이거 써보고 저거 써보고,, 완전히 이해하고 쓰는게 아니라 일단 돌아가게 구글신의 도움을 받아 만들고 있어서 세련되지 못하다는 점.\n"
},
{
	"uri": "/spring/spring-boot/3/",
	"title": "maven 빌드 오류",
	"tags": [],
	"description": "",
	"content": "😱 왜 Spring Boot 배포가 되지 않는걸까? 프로젝트 팀 작업을 하면서 spring boot 배포를 하는 친구들이 build 오류가 난다고 했다. 처음엔 git에서 파일을 pull 할 때 제대로 못한게 아닐까 싶었는데, 그런 오류는 아니었다.\n해당 배포하는 깃에 들어가 파일을 보니, 다음과 같은 구조로 되어있었다.\n자세히보면 src/main/java/com/ycar 내부에 ~Application.java 라는 파일이 두개가 있다. 즉, @SpringBootApplication 어노테이션이 붙은 클래스가 두개이며, 어플리케이션 주입 처리가 잘못되어있다는 것을 알 수 있다.\n심지어 pom.xml 에서 @SpringBootApplication이 시작하는 루트도 잘못되어 있음을 알 수 있다\n\u0026lt;groupId\u0026gt;com.exmaple\u0026lt;/groupId\u0026gt; 이 아니라,\n\u0026lt;groupId\u0026gt;com.ycar.boot\u0026lt;/groupId\u0026gt; 로 시작해야한다.\n🔑 maven build 오류가 있다! 현재 오류의 문제점은\n  package 루트가 중복으로 되어있다는 점 src/main/java/com/ycar 내부에 par과 passenger 로 나뉘어야 한다.\n현재는 passenger 패키지 부분이 중복으로 들어가 있는 것을 알 수 있다. 아마 버전 업데이트를 하면서 복사-붙여넣기를 하다 중복이 된 것이 아닐까 싶다.\n  pom.xml 에서 groupId와 artifactId, name을 변경해야 한다. 기존에 setting 했던 id와 name이 덮어씌워지면서 충돌이 나고 있다.\n  test 패키지에 있는 passenger 파일도 삭제해야 한다. @SpringBootApplication 을 하나로 명시하고자 하기때문에, test 패키지도 정리해야 한다.\n   build 실패를 위의 문제점 1~3 과 같이 어림짐작으로 해결했는데, 왜 이렇게 되는지 그 원인과 구조를 알고싶었다. 이거는 여기로 올 것.\n"
},
{
	"uri": "/node.js/3/",
	"title": "aws EC2로 node.js 배포하기",
	"tags": ["node.js", "TIL"],
	"description": "",
	"content": "1. node.js로 서버 배포하기 마지막 프로젝트를 하며 간단한 채팅을 node.js로 만들었다. 간단하게 구현하는 건 어찌어찌 했는데,, 문제는 배포하는 것. 주변에 구현하면서 고생한 친구가 있어서 편하게 했다.\n[STEP 1] 인스턴스 생성부터 - putty 설정까지  aws ec2 인스턴스 생성\n프리티어만으로 체크한 후\nAmazon Linux AMI 2018.03.0 (HVM), SSD Volume Type 를 선택했다\n자동으로 선택되어 있는 t2.micro 로 했으며,\n관리하기 쉽게 보안그룹 이름을 내가 원하는 이름으로 변경함. pem 키 발급 (인증키임.. 재발급 불가라 잃어버리면 새로 인스턴스 생성해야함 ㅠ)\n알아보기 쉽게 키 페어 이름을 잘 적어준다\n외장하드나 개인이 보관하기 쉬운 파일에 저장하기 puttygen.exe 로 ppk 키로 발급받기 LOAD 를 눌러 방금 발급받은 pem 키를 불러온다\nsave private key 를 눌러 ppk키로 저장 (동일한 이름으로 하되, 확장자만 달라야 함. 다르면 서버에러) putty.exe를 실행 새로운 session을 만들고 저장한다\n주의: hostname과 이름을 만들고 \u0026lsquo;save\u0026rsquo; 버튼을 눌러줘야 함.  session 탭:\nHostName은 ec2-user@(ip주소) Connection - SSH - Auth 탭:\nppk키를 저장해준다.   putty에서 저장한 세션을 open  [STEP 2] git 클론 후 node js 배포하기   현재 ec2 인스턴스에 깃 설치\nsudo yum install git\rgit init\rgit config --global user.name \u0026quot;your username\u0026quot;\rgit config --global user.email [your mail address]\r주의할 점: \u0026quot; \u0026quot; 와 [ ] 를 무조건 써준다! 안써주면 인식을 못함!\n  nvm 설치\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\r  nvm 활성화\n. ~/.nvm/nvm.sh\r  node 설치\nnvm install node\r  설치 확인\nnode -e \u0026quot;console.log('Running Node.js ' + process.version)\u0026quot;\r  깃에 배포용 repository 생성\n  해당 repository의 주소 복사 후 현재 ec2 인스턴스로 클론하기\ngit clone + [repository 주소]\r  node js 에서 연습했던 대로 서버 실행\n  하면 끝인 줄 알았지? 는 안됨!\n  노드서버 백그라운드 실행하기   일단 현재 채팅용 포트를 설정하지 않았음. AWS의 보안그룹으로 들어가서 ec2 인스턴스 생성시 만들었던 보안그룹으로 들어간다. 인바운드 탭에서 사용자지정TCP규칙 \u0026gt; 원하는 채팅포트 \u0026gt; 저장\n  위의 1번을 해결한다고 해도 완벽하게 해결되는 건 아님 이유? 내가 putty를 꺼도 실행이 되어야 확실한 배포인 거니까\n  백그라운드 실행하기 1 forever 설치\nnpm install forever -g\r  백그라운드 실행하기 2 원하는 js파일 실행하기\n(실행파일 위치까지 들어간 후) forever start [js script]\r  현재 백그라운드로 실행중인 서버 확인하기\nforever list\r  백그라운드 서버 종료하기\nforever stop [js script]\r  참고) nohup으로 했으나 실행되지 않았음\n nohup으로 백그라운드 실행  $ sudo nohup node (js파일) \u0026amp;\r  실행 후 백그라운드로 올라왔으면 ENTER 키로 빠져나오면 된다.\n  프로세스 실행되고 있는지 확인\n$ ps -ef\r  종료\nsudo kill -9 [종료하고 싶은 프로세스 pid]\r  "
},
{
	"uri": "/spring/user_register/3/",
	"title": "Spring 웹상에서 메일 보내보기",
	"tags": [],
	"description": "",
	"content": "웹상에서 메일 보내보기 목차  설정\n-1 pom.xml\n-2 servlet-context\n-3 Controller\n-4 왜 MailSender 사용가능할까?\n-5 보낸사람이 다를 때? Java Mail API로 메일 작성하기\n-1 Java Mail API 란?\n-2 HTML 형식으로 보내기\n-3 파일 첨부하기  설정부터 해보자! 1. pom.xml에서 메일 설정 \u0026lt;!-- 메일 설정 시작 --\u0026gt; \u0026lt;!-- javax.mail/mail --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.mail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mail\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.7\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-context-support\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.springframework-version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2. servlet-context 설정 \u0026lt;beans:bean id=\u0026#34;mailSender\u0026#34; class=\u0026#34;org.springframework.mail.javamail.JavaMailSenderImpl\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;host\u0026#34; value=\u0026#34;smtp.gmail.com\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;port\u0026#34; value=\u0026#34;587\u0026#34; /\u0026gt;\u0026lt;!-- 465 or 25 --\u0026gt; \u0026lt;beans:property name=\u0026#34;username\u0026#34; value=\u0026#34;본인 이메일 계정\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;password\u0026#34; value=\u0026#34;해당 계정의 비밀번호\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;defaultEncoding\u0026#34; value=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;javaMailProperties\u0026#34;\u0026gt; \u0026lt;beans:props\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.transport.protocol\u0026#34;\u0026gt;smtp\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.smtp.auth\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.smtp.starttls.enable\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.debug\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;/beans:props\u0026gt; \u0026lt;/beans:property\u0026gt; \u0026lt;/beans:bean\u0026gt; 3. Controller 작성 @Controller public class MailSendController { @Autowired MailSender sender; @ResponseBody @RequestMapping(\u0026#34;/mail/send\u0026#34;) public String sendMail() { //메일내용설정해주기 \tSimpleMailMessage message = new SimpleMailMessage(); message.setTo(\u0026#34;보내는사람 이메일~~\u0026#34;); message.setSubject(\u0026#34;hiiiiiiiiiiiii\u0026#34;); message.setText(\u0026#34;my first email to send a letter\u0026#34;); message.setFrom(\u0026#34;받는사람 이메일!!\u0026#34;); sender.send(message); return \u0026#34;send OK\u0026#34;; } } 왜 MailSender를 사용할 수 있을까? bean으로 설정된 mailSender는 JavaMailSenderImpl 클래스임.\n이 클래스는 JavaMailSender 인터페이스의 구현체. JavaMailSender를 살펴본다면,\npublic interface JavaMailSender extends MailSender {} 즉, MailSender를 상속받기 때문에 다형성이 가능하므로 컨트롤러에서 MailSender 클래스를 주입받을 수 있게 된다.\n보낸사람을 설정해줬는데도 bean에서 설정한 메일주소로 보내지는 이유 google의 보안정책이 바뀌어서 설정된 계정으로만 보내짐.\ngoogle 계정을 쉽게 만들 수 있기도 하고, 이를 악용하여 악성코드를 보낼 수도 있기 때문인게 아닌가 싶다.\n그러면 이제 Java Mail API로 메일을 작성해보자! Java Mail API 가 뭐야?  파일 첨부 또는 HTML로 구성되어 있는 경우 MimeMessage 이용  JavaMailSender 인터페이스는 MimeMessage 객체를 생성해주는 createMimeMessage() 메서드를 제공 이 메서드가 리턴한 MimeMessage 객체를 이용해서 메시지를 구성한 뒤 메일 발송  1. HTML 형식으로 보내보기 @Autowired JavaMailSender jmsender; @ResponseBody @RequestMapping(\u0026#34;/mail/send/javamail\u0026#34;) public String sendJavaMailSender() { MimeMessage message = jmsender.createMimeMessage(); try { //메일제목설정  message.setSubject(\u0026#34;[안내] 처음보내는 JAVAMAIL SENDER\u0026#34;, \u0026#34;utf-8\u0026#34;); //html메일내용  String htmlStr = \u0026#34;\u0026lt;h1 style=\\\u0026#34;color: lightblue;\\\u0026#34;\u0026gt;hi everyone~~\u0026lt;/h1\u0026gt;\u0026#34; + \u0026#34;\u0026lt;a href=\\\u0026#34;http://www.naver.com\\\u0026#34;\u0026gt;naver\u0026lt;/a\u0026gt;\u0026#34;; //내용설정  message.setText(htmlStr, \u0026#34;utf-8\u0026#34;, \u0026#34;html\u0026#34;); //TO 설정  message.addRecipient(RecipientType.TO, new InternetAddress(\u0026#34;받는사람메일계정\u0026#34;, \u0026#34;mand2 님\u0026#34;, \u0026#34;utf-8\u0026#34;)); jmsender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return \u0026#34;send OK\u0026#34;; } setText 메서드: subtype을 설정해주지 않으면 그냥 다 전해짐,, 태그를 텍스트로 인식!\nTo설정에서 new InternetAddress를 사용하는 이유?\n받는사람의 메일계정이 아닌 사용자 이름으로 보내줄 수 있음\n2. 파일 첨부해서 보내보기 스프링이 제공하는 MimeMessageHelper 클래스를 사용\n@RequestMapping(\u0026#34;/mail/send/file\u0026#34;) @ResponseBody public String sendFileAttach() { MimeMessage message = jmsender.createMimeMessage(); try { MimeMessageHelper helper = new MimeMessageHelper(message, true, \u0026#34;utf-8\u0026#34;); //title  helper.setSubject(\u0026#34;[info] file attatched\u0026#34;); //content html  String htmlStr = \u0026#34;\u0026lt;h1\u0026gt;file has been attatched.\u0026#34; + \u0026#34;please download the file I send \u0026lt;/h1\u0026gt;\u0026#34;; //content setting  helper.setText(htmlStr, true); //to  helper.setTo(new InternetAddress(\u0026#34;받는사람 메일주소\u0026#34;, \u0026#34;만득이 님\u0026#34;, \u0026#34;utf-8\u0026#34;)); //create file instance + absolute root  DataSource dataSource = new FileDataSource(\u0026#34;절대경로루트\u0026#34;); helper.addAttachment(MimeUtility.encodeText(\u0026#34;파일이름\u0026#34;, \u0026#34;utf-8\u0026#34;, \u0026#34;B\u0026#34;), dataSource); jmsender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return \u0026#34;send ok\u0026#34;; } #1 MimeMessage 객체로 메세지생성\n#2 MimeMessageHelper 객체 생성 ( 메세지객체, 파일유무, charset)\n#3 메일 제목 설정\n#4 내용 html 설정\n#5 받는사람 설정\n#6 보낼 파일 설정\n​\t파일 위치\n​\t파일이름 설정\n​\t- MimUtility 의 encodeText 메서드를 이용\n​\t- 파일이름(한글일 때) 설정\n#7 해당 메세지 객체를 send 해주기\n"
},
{
	"uri": "/spring/user_register/4/",
	"title": "회원가입 시 이메일 인증처리",
	"tags": [],
	"description": "",
	"content": "회원 가입 시 email을 받고\r인증 코드를 생성, 해당 email 계정으로 인증 처리 메일을 보내보자!\r관리자가 보낸 인증코드가 맞다면 인증 완료처리까지-\r먼저 mySQL에서 컬럼 추가해준다. -- 인증코드와 verify 확인 코드 ALTER TABLE `project_01`.`memberinfo` ADD COLUMN `code` VARCHAR(25) NULL AFTER `REGDATE`, ADD COLUMN `verify` CHAR(1) NULL DEFAULT \u0026#39;N\u0026#39; AFTER `code`, ADD COLUMN `email` VARCHAR(45) NULL AFTER `verify`; DAO 변경 DAO 변경\n//verify public int updateVerify(String id, String code); public int updateEmail(Member member); Mapper. xml 변경\n\u0026lt;!-- result map 설정 추가 --\u0026gt; \u0026lt;resultMap type=\u0026#34;com.ny.mm.model.Member\u0026#34; id=\u0026#34;MemberVO\u0026#34;\u0026gt; \u0026lt;result property=\u0026#34;idx\u0026#34; column=\u0026#34;idx\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;id\u0026#34; column=\u0026#34;id\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;pw\u0026#34; column=\u0026#34;pw\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;name\u0026#34; column=\u0026#34;name\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;photo\u0026#34; column=\u0026#34;photo\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;regDate\u0026#34; column=\u0026#34;regdate\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;code\u0026#34; column=\u0026#34;code\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;verify\u0026#34; column=\u0026#34;verify\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;email\u0026#34; column=\u0026#34;email\u0026#34;/\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- 회원가입시 code, email도 DB에 연결해주기 --\u0026gt; \u0026lt;insert id=\u0026#34;insertMember\u0026#34; parameterType=\u0026#34;com.ny.mm.model.Member\u0026#34;\u0026gt; insert into project_01.memberinfo (ID, PW, NAME, PHOTO, CODE, EMAIL) values (#{id}, #{pw}, #{name}, #{photo}, #{code}, #{email}) \u0026lt;/insert\u0026gt; \u0026lt;!-- 인증 확인 처리 --\u0026gt; \u0026lt;update id=\u0026#34;updateVerify\u0026#34;\u0026gt; update project_01.memberinfo set verify = \u0026#39;Y\u0026#39; where id = #{param1} and code = #{param2} \u0026lt;/update\u0026gt;\tmodel에 변수 추가  변경해야 할 java 파일 :\n-Member.java\n-JoinRestApiRequest.java //회원 가입 시 받는 객체\n-LoginInfo.java //로그인 할 때 생성하는 객체\n-VerifyMember.java : 새로 생성하는 파일\n Member.java @JsonIgnore private String code; private char verify; private String email; public Member(String id, String email) { this.id = id; this.email = email; randomCode(); } //영대소문자+숫자 난수 public void randomCode() { StringBuffer temp = new StringBuffer(); Random rnd = new Random(); String str = String.valueOf( (char) (rnd.nextInt(26) + 97) ); for(int i = 0; i \u0026lt; 10; i++) { //10자리 난수발생  int index = rnd.nextInt(3); //숫자 012 중에서 난수 발생시킴  switch (index) { case 0: //97~122 a-z의 아스키코드  temp.append((char)(rnd.nextInt(26) + 97)); break; case 1: temp.append((char)(rnd.nextInt(26) + 65)); break; case 2: temp.append(rnd.nextInt(10)); break; } } System.out.println(\u0026#34;난수코드생성: \u0026#34; + temp); setCode(temp.toString()); } 다른 파일들은 변수 추가하고 getter, setter 설정과 toString 오버라이딩 정도로 하면 됨.\nService 단: MailSenderService.java 파일 생성\nJoinService 파일 변경 MailSenderService.java 생성 @Service(\u0026#34;mailSenderService\u0026#34;) public class MailSenderService { @Autowired private JavaMailSender sender; public int send(Member member) { int result = 0; MimeMessage message = sender.createMimeMessage(); String name = member.getName() + \u0026#34; 님\u0026#34;; String email = member.getEmail(); String id = member.getId(); String code = member.getCode(); try { message.setSubject(\u0026#34;[info] Welcome TO Our WEBSITE\u0026#34;, \u0026#34;utf-8\u0026#34;); String htmlMsg = \u0026#34;\u0026lt;h1\u0026gt;회원가입을 축하합니다~\u0026lt;/h1\u0026gt;\u0026#34;; htmlMsg += \u0026#34;\u0026lt;h1\u0026gt;사랑합니다 \u0026#34;+name+\u0026#34;!\u0026lt;/h1\u0026gt;\u0026#34;; htmlMsg += \u0026#34;\u0026lt;a href = \\\u0026#34;http://localhost:8080/mm/join/verify?id=\u0026#34;+id+\u0026#34;\u0026amp;code=\u0026#34;+code+\u0026#34;\\\u0026#34;\u0026gt;인증하기 클릭\u0026lt;/a\u0026gt;\u0026#34;; message.setText(htmlMsg, \u0026#34;utf-8\u0026#34;, \u0026#34;html\u0026#34;); message.addRecipient(RecipientType.TO, new InternetAddress(email, name, \u0026#34;utf-8\u0026#34;)); sender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return 1; } } id를 이메일 계정으로 받지 않고 이메일 계정을 따로 만들었으므로, 보낼 때 id, name, email 등등 여러가지를 parameter로 넘기는게 번거로워서 Member객체로 바로 넘겨버림. 인증을 할 때 \u0026lt;a\u0026gt;태그에 가입한 사람의 아이디와 코드를 보내준다.\nmail 보내는 설정을 자세하게 알고싶다면 여기로\n### JoinService 변경 @Autowired private MailSenderService mailService; //가입 서비스 rest + email 사용 public int joinMember( HttpServletRequest request, JoinRestApiRequest joinMember ) { /*생략*/ //파일 올렸을 때  if(joinMember.getPhoto() != null) { //file을 서버의 지정 경로에 저장.  newFileName = System.nanoTime() + \u0026#34;_\u0026#34; + joinMember.getId(); joinMember.getPhoto().transferTo(new File(dir, newFileName)); //데이터베이스 저장을 하기위한 파일이름 세팅  memberinfo.setPhoto(newFileName); } result = dao.insertMember(memberinfo); mailService.send(memberinfo); /*생략*/ return result; } join을 하면서 바로 같이 mailService의 send메서드를 통해 인증메일 보냄.\nController: 이메일 인증 처리해주기 @Controller public class VerifyController { @Autowired private VerifyService verifyService; @RequestMapping(\u0026#34;/join/verify\u0026#34;) public String verify(@RequestParam(\u0026#34;id\u0026#34;)String id, @RequestParam(\u0026#34;code\u0026#34;)String code) { return \u0026#34;join/verify_\u0026#34; + verifyService.verify(id, code); } } 인증처리가 제대로 되었다면 join/verify_Y로, 아니라면 join/verify_N 이라는 이름의 view로 들어가게 설정\n메일함을 열어본다면 이렇게 나온다\n결과화면: 인증완료 결과화면: 인증미완료 "
},
{
	"uri": "/spring/spring-boot/4/",
	"title": "@SpringBootApplication",
	"tags": [],
	"description": "",
	"content": "@SpringBootApplication 이란? 잠시 돌아가서, 이 @SpringBootApplication이 뭐기에 빌드 오류를 뱉어내는지 보자\n1. @SpringBootApplication의 의미는 @Configuration + @EnableAutoConfiguration + @ComponentScan 을 합친 것이다.\n-1 @Configuration 이란?  현재 클래스가 Spring의 설정 파일임을 알려주는 어노테이션 == Spring이 Java config로 간주한다! Configuration을 클래스에 적용하고 @Bean을 해당 클래스의 메소드에 적용하면\n@Autowired로 빈을 부를 수 있다. 개발자가 생성한 class를 Bean으로 생성 할 때 Single Tone으로 한번만 생성하고\n@Component는 Bean을 생성 할 때 java에서 new로 생성하듯이 생성한다.  -2 @EnableAutoConfiguration 이란?  Spring boot 클래스패스 세팅 및 다양한 Bean 추가 등을 시켜주는 어노테이션 어플리케이션에 추가된 설정들을 자동으로 추가해주는 어노테이션  -3 @ComponentScan 이란?   다른 컴포넌트, 서비스, 설정 등을 찾을 수 있게 도와주는 어노테이션\n즉 자바 클래스를 스프링 빈이라고 표시하고\n스프링의 component-scanning 기술을 통해 ApplicationContext에 빈으로 등록하게 하는 역할\n  == @Component를 검색하도록 도와준다\n  @Configuration 클래스도 컴포넌트로서 검색 대상이 된다.\n 스프링은 기본적으로 객체를 자동으로 생성하여 관리하기 때문에 @Component 어노테이션이 있는 클래스들을 스프링 컨테이너가 생성해준다. @ComponentScan는 특별히 basePackage를 지정하지 않아도 main class가 위치한 패키지를 Root package로 하여 그 이하의 모든 컴포넌트 클래스들을 검색하여 빈으로 등록한다.\n   메인 클래스인 YcarBootServerApplication 를 보면, 이 클래스는 com.ycar.boot 패키지에 있다. 이 패키지가 컴포넌트 스캔의 루트패키지가 된다. 따라서 com.ycar.boot 패키지를 기준으로 그 하위에 있는(== 하위 패키지) 모든 컴포넌트들을 검색한다.\n  (주의) pom.xml에서 루트 패키지를 정확하게 매칭시켜야 한다.\n  Spring XML설정의 \u0026lt;context:component-scan\u0026gt;을 대신해 자바에 설정\n  컴포넌트에 대해서는 아래에 따로 기술!\n  2 @Component : @Repository, @Service, @Controller @Repository, @Service, @Controller는 @Component에 속한 어노테이션이다.\n2 - 1 왜 @Component 대신 쓸까?  @Repository\n@Service\n@Contoller - @RestController\n ** 3가지 종류의 컴포넌트가 다른 이름을 가진 이유는 레이어를 구분하기 위함\n2 - 2 @Repository 어노테이션 DAO에 특화된 어노테이션이다. @Component 어노테이션을 써도 상관없지만, DAO 클래스들에 @Repository 어노테이션을 사용함으로써 @Component 어노테션이 가진 특성과 함께, DAO의 메소드에서 발생할 수 있는 unchecked exception들을 스프링의 DataAccessException으로 처리할 수 있는 장점 또한 가질 수 있다.\n2 - 3 @Service 어노테이션 서비스 레이어 클래스들에 사용되어지는 어노테이션이다. 역시나 @Component 어노테이션을 사용해도 상관없다. @Service 어노테이션을 사용함으로써 해당 클래스가 서비스 레이어 클래스라는 것을 명확하게 할 수 있다. 현재는 @Repository 어노테이션 처럼 추가적인 behavior는 없지만, 추후에 추가될 예정이다.\n2 - 4 @Controller 어노테이션 MVC 패턴에서 Controller 클래스에 선언되어진다. 이 또한 @Component 로 대체할 수 있다. 하지만, @Controller 어노테이션을 사용함으로써 @RequestMapping 등의 추가적인 어노테이션을 사용할 수 있게 된다.\n2 - 5 ** 실제 프로젝트에서 @Component가 필요한 비슷한 상황들을 직면하곤 한다. 하지만, 대부분의 상황에서 우리는 @Repository, @Service, @Controller 어노테이션을 사용하는게 좋다고 한다.\nSpring 빈 컨테이너 : 주기 관리 이렇게 @SpringBootApplication 와 그 안의 @Configuration, @EnableAutoConfiguration, @ComponentScan 에 대해 간단히 살펴보았다.\n그러면 생성된 Bean을 누가 등록해줄까? 스프링 빈 컨테이너다.\n 스프링 빈 컨테이너는 인스턴스의 생명주기를 관리한다.\n컨테이너의 종류는 ApplicationContext와 BeanFactory 2가지로 나누어지는데,\n둘의 차이점은 쉽게 말하면 ApplicationContext가 BeanFactory의 향상된 버전이라 한다.\n ApplicationContext 는 run() 메서드를 통해 Java configure를 읽어 bean을 등록한다. 싱글턴으로 객체 관리를 하기 때문에 한번만 실행된다.\n🔑​Spring Boot 구조의 이해 - 우리의 문제점은 여기에 ApplicationContext , 빈 관리 등 스프링 구조를 잘 몰랐기 때문에 발생한 문제였다. 기준이 되는 패키지를 생각하고 형상관리를 했어야 했다\u0026hellip;. 문제를 알았으니 이제 해결해야겠죠\n프로젝트를 하면서 컴퓨터 구조를 확실하게 알아야겠다는 생각을 많이 했다. 나 뿐만 아니라 우리 팀원 모두 그런 느낌을 받은건 우연이 아닌것 같다. 빠른 문제 해결을 위해선 기본적인 구조를 파악하고 체화해야 함을,, 오늘도 배운다- 까먹을 땐 이 블로그 포스트를 보며 다시 공부하자 😀😀\n출처:\n 기본기를 쌓는 정아마추어 코딩블로그 개발/일상_Mr.lee jhkang-dev님의 블로그 https://sieunlim.tistory.com/10  "
},
{
	"uri": "/spring/user_register/5/",
	"title": "메이븐 빌드 및 배포란?",
	"tags": [],
	"description": "",
	"content": "메이븐은 프로젝트 객체 모델(Project Object Model)이라는 개념을 바탕으로 프로젝트 의존성 관리, 라이브러리 관리, 프로젝트 생명 주기 관리 기능 등을 제공하는 프로젝트 관리 도구이다. 또한 플러그인을 기반으로 소스 코드로부터 배포 가능한 산출물을 만들어 내는 빌드 기능 뿐만 아니라 레포팅 및 documentation 작성 기능 등을 제공한다.\n메이븐 자세히 알아보러 가기\npom.xml 태그들 자세히 알아보기\npom.xml 태그 조금 더 간결하게, 정리 더 잘 된 것\nmaven (메이븐 구조, 차이점, 플러그인, 라이프사이클, 의존성, pom.xml)\n자바 웹 어플리케이션 배포  SVN 으로 형상관리 하는 경우도 있다 (회사에서,,) git으로 형상관리 하기  배포 순서 :\n 각자 소스 코딩 후 형상관리 툴에 push 배포용 서버 컴퓨터에서 pull 받음 war 파일로 package tomcat에 배포  "
},
{
	"uri": "/others/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": "\r\r[책] 오브젝트 (1)\r\r\r\r\r"
},
{
	"uri": "/",
	"title": "GoRaNee&#39;s dev-log",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/spring/spring-boot/",
	"title": "Spring Boot",
	"tags": [],
	"description": "",
	"content": "\r\rspring.jpa.open-in-view 로그 오류 해결하기\r\r\r\r\rquerydsl 설정하기\r\r\r\r\rmaven 빌드 오류\r\r\r\r\r@SpringBootApplication\r\r\r\r\r"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/spring/user_register/",
	"title": "회원가입",
	"tags": [],
	"description": "",
	"content": "\r\rsingle-page 회원관리 폼 만들기\r\r\r\r\rSpring handler 인터셉터\r\r\r\r\rSpring 웹상에서 메일 보내보기\r\r\r\r\r회원가입 시 이메일 인증처리\r\r\r\r\r메이븐 빌드 및 배포란?\r\r\r\r\r"
},
{
	"uri": "/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/til/",
	"title": "TIL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/excel/",
	"title": "Excel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/table/",
	"title": "Table",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/sort/",
	"title": "Sort",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/interviews/",
	"title": "Interviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/interviews/",
	"title": "Interviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/others/interviews/",
	"title": "면접질문 정리",
	"tags": ["Interviews", "Others"],
	"description": "",
	"content": "신입 개발자로서 면접을 보며 받았던 면접질문들을 기억이 나는 대로 복기하여 써보려 한다. 일단 기억력이 좋지 않아서 정확한 질문은 기억이 나지 않지만, 이런 종류 or 느낌의 면접 질문을 받았구나~ 라고 보면 좋을 것 같다. 편안하게 커피 한 잔 하며 보시길 추천! ☕\n🐸 기본 인성 면접(비전공자 기준) 일단 본인이 비전공자이며, 직장경험이 없잖아 있는(없다고 하기도 그렇고 있다고 하기도 뭐한 수준) 것을 먼저 밝히는 바이다. 모든 곳에서 공통적으로 받은 질문은\n 왜 이 길을 선택했나요? 꼭 개발자여야만 하는 이유는? 경력이 상당히 특이하신데, 어떻게 생각하는지? 학원에서 개발 6개월 배운 거 맞나요? 6개월 간 공부하며 느낀 점 / 어려웠던 점 / 힘들었던 점 비개발 부문으로도 경력을 살릴 수 있는데 왜 굳이? 만득씨가 생각하기에 본인이 타 지원자보다 더 내세울 수 있는 부분? 학원 사람들에 비해서 본인이 어느정도 위치에 속한다 생각하나? (실력 / 노력으로 나눠서 대답) 요즘 관심있는 분야는? 공부중인가? 본인이 생각하기에 자신의 장점 / 단점이 개발직에 적합하다 생각하나?  🔑 기술 면접 -1  이 포트폴리오 본인이 직접 작성한건가? 학원에서 만들어 준 것 아닌가? 깃허브 관리에 대해 질문(깃허브 자주 사용하는지 등등..) 이 프로젝트 간단 설명해봐라 기술스택 질문1: RDS 무엇 사용했는지? 등.. 기술스택 질문2: WAS 와 TOMCAT의 차이? / WAS와 웹서버의 차이? 기술스택 질문3: Spring과 Springboot의 차이점 설명 -\u0026gt; 꼬리질문 기술스택 질문4: node.js 사용한 이유? 기술스택 질문5: Oracle과 Mysql 모두 사용해봤는데 사용하면서 느낀 둘의 차이점 / 특징은? 스프링만 사용했나? 다른 건? 이 프로젝트를 했을 때 가장 어려웠던 점 설명 -\u0026gt; 꼬리질문 반대로 가장 재미있었던 경험은? -\u0026gt; 관련 기술로 또 꼬리질문 이 프로젝트에서 본인이 기여한 부분은? 수치화 한다면 어느 정도라 생각? 본인이 했다고 한 부분을 혼자서 다 했다는 건가? -\u0026gt; 꼬리질문 백엔드(server) 쪽만 구현한건가? 프론트는 해 본 경험이 없나? 배포를 어떤 방식으로 했나? 팀장이었나? 왜 이리 한 게 많은가?  🔑 기술 면접 -2  REST 구조를 썼던데 왜 선택했나? REST 구조 설명 / REST와 RESTFUL의 차이가 있다면 설명해봐라 메서드 오버라이딩/오버로딩의 차이점? 쓰는 이유? 어노테이션의 뜻 Bean을 만드는 어노테이션 생각나는 대로 다 말해봐라 / 비슷한 질문 있음. @SecondaryTable 이게 뭔가? 설명해봐라 (위의 질문과 연결) Boot를 쓸 때 사용한 어노테이션 외에도 알아본 어노테이션이 있는가? 있다면 설명 서브 쿼리의 정의/종류/차이점? SQL 실행순서 설명해봐라 Mysql로 댓글을 만든다면 어떤 방식으로 만들 것인가? SQL문 작성해봐라 .ready() vs .onload() 특징 및 차이 jQuery란 무엇인가 MVC 패턴 JPA 썼던데 소감? 왜 JPA를 쓰는지 설명해봐라 (특징위주로 답변) EL JSTL JSP 정의 / 차이 자바 버전 관련 질문 DAO, DTO, Entity Class의 차이 maven vs gradle rest 메서드 질문: template 사용한 이유와 왜 이 메서드를 썼는지? inner join / outer join / full outer join 특징 설명 DI가 뭔지 아는가? 무엇인가? Spring Aop가 무엇인가? 관련해서 사용해본 경험이 있는지? 다른 팀원이 구현한 부분 질문 / 이 상황에 대해 어떻게 할 것인지?  사실 이 글을 쓰는 이유 중의 하나는 이런 기본적인 CS도 까먹지 말고!!! 다시 보면서 정리하고 내재화 할 때까지 끊임없이 보자는 뜻에서 작성했다. 말이 엄청 기네, 짧게 말하자면 나 자신을 위한 포스팅이었다,, 구글링을 잘 하다보면 각자 정리한 것들이 많은데 눈팅만 하고 면접을 보러가면 바로 발려버린다. 가장 기본적이며 개념을 묻는 질문은 이 질문 리스트에서 제외시켰는데 구글링만 해도 다 아니까,, 이 글을 읽는 사람이 자신의 상황에 잘 대입하여 준비를 하면 되지 않을까 싶어 공유한다.\n"
},
{
	"uri": "/others/books/objects_1/",
	"title": "[책] 오브젝트 (1)",
	"tags": ["Books", "Reviews", "Others"],
	"description": "",
	"content": "객체지향를 정확하게 구현하고자 오브젝트 라는 책을 구입하였다. 구입하게 된 계기는 우아한형제들 기술블로그에서 신입 개발자의 적응기를 보았다. 자신의 선배가 추천한 책이라고 하였고, 실제로도 많은 도움을 받았다는 후기를 봤다. 웹서핑을 하며 돌아다니다 오브젝트 책에 관한 후기도 몇 개 보기도 하였고 하여 바로 구입!!\n🐸 나를 괴롭히는 객체지향 객체지향, 학원에서 수강을 할 때 가장 재미있었던 개념이었다. 객체가 상태(field)와 행동(method)을 갖고 있다! 얼마나 간단한가. 숙제로 나온 구슬치기게임(가위바위보와 같은..)을 자바로 쉽게 구현해보기도 하였고 수업시간 동안 어렵다라는 느낌을 받은 적이 없었다.\n그런데 카페주문시스템 프로젝트를 하며 당황했다. 객체의 범위를 어디까지 만들어야하는지 명확한 기준이 세워지지 않았다. 일단 만들어보자! 라는 생각을 하여 객체 하나에 주문클래스를 구현하였고\u0026hellip;. 프로젝트가 끝날 때까지 리팩토링을 하지 못한 채 하나의 클래스로 만들어버렸다\u0026hellip; :scream: 무려 500줄\u0026hellip;. 엄청난 뎁스의 메서드들\u0026hellip;.. 그때부터였다. 객체지향이 어려운게 책임과 역할을 객체에 잘 분배하기 어렵다는 것임을. 끝까지 내가 쫓아가야 할 존재임을.\n이러저러한 이유로 오브젝트를 보게 되었고, 다 읽지 못하였지만 지금까지 받은 느낌은 \u0026lsquo;어떻게 이렇게 쉽게 설명할 수 있을까? 멋있다.. 신기하다..\u0026rsquo; 이다. 아직 고급단계의 개발자는 아니지만, 저자의 \u0026lsquo;객체지향\u0026rsquo;에 대한 고민과 탐구 흐름, 그 결과를 문장 사이사이에서 느낄 수 있다. 한줄 한줄이 깨알같다고나 할까\u0026hellip; 조금 더 지나서 읽는다면 더 공감되는 부분이 많을 것 같다.\n4장: 캡슐화 지키기, 낮은 결합도와 높은 응집도로   캡슐화란 변할 수 있는 어떤 것이라도 감추는 것\n  **파급효과(ripple effect)**를 조심해야 한다.\nDiscountCondition을 변경하면 Movie, Screening, Reservation Agency 까지 변경하는 상황이 발생한다.\n  객체는 역할과 책임을 갖고있다. 상태와 행동은 field와 method로 구현됨.\n  설계의 무게가 외부로 향해야 한다. 즉, 객체간 협력하는 방법에 대해 고민해야 한다.\n  낮은 결합도를 만들자\n DiscountCondition 의 구현에 속하는 부분(명칭이 변경되거나 종류가 추가되거나 조건절을 충족하는 필요 정보가 변경될 때 등)은 Movie가 아니라 DiscountCondition에서 구현해야 한다.    의존성을 낮춰야 한다. 제어 로직이 한 객체 안에 밀집되면 안된다.\n  이런 문제가 발생하는 이유 ? 데이터 중심의 설계 때문 !\n 데이터 결정 시기가 빠르다. 객체를 단순한 데이터의 집합체라 생각하게 된다. 오퍼레이션이 고립된다. 접근자와 수정자(getter setter)를 과도하게 남발하고, 내부 구현 내용을 인터페이스를 통해 외부로 그대로 노출한다.    5장: 책임 할당하기  책임 중심의 코드를 만들기 : 데이터보다 행동을, \u0026lsquo;협력\u0026rsquo;이라는 문맥 안에서 책임 결정하기 어떤 객체에게 어떤 책임을 줄 지, 즉 트레이드오프 할당방법은 그때그때 다르다. 상황과 문맥에 따라천차만별 GRASP 패턴 : 가장 기본적인 패턴방법.   참고  GRASP 패턴에 대해 잘 정리해놓은 블로그 - neosy Blog  "
},
{
	"uri": "/tags/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/reviews/",
	"title": "Reviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/spring-boot/",
	"title": "Spring Boot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/node.js/",
	"title": "node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/goranee/",
	"title": "Goranee",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/",
	"title": "Series",
	"tags": [],
	"description": "",
	"content": ""
}]