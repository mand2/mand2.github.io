[
{
	"uri": "https://mand2.github.io/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Chapter 0 About Backend 서버 개발자 고라니입니다.\n 1년차 신입 개발자 JAVA 70% Javascript 20% Python 10% 여러가지 기술에 관심이 많습니다.  "
},
{
	"uri": "https://mand2.github.io/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Spring \rRest Api\r\r\r\rMethods @Get, @Post, Delete, @Put\r\r\r@PutMapping 사용 시 415 오류 해결방법\r\r\rstatustext parsererror 해결방법\r\r\rREST API Client에서 호출가능한 Library\r\r\r\rSpring Boot\r\r\r\rspring.jpa.open-in-view 로그 오류 해결하기\r\r\rquerydsl 설정하기\r\r\rmaven 빌드 오류\r\r\r@SpringBootApplication\r\r\r\r회원가입\r\r\r\rsingle-page 회원관리 폼 만들기\r\r\rSpring handler 인터셉터\r\r\rSpring 웹상에서 메일 보내보기\r\r\r회원가입 시 이메일 인증처리\r\r\r메이븐 빌드 및 배포란?\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/til/",
	"title": "TIL",
	"tags": [],
	"description": "",
	"content": "Chapter 2 TIL \rGit 커밋 그래프(contribution graph)를 3D로 보는 방법\r\r\r\r\r자바 형변환 안전하게 하기\r\r\r\r\r자바스크립트로 AWS autoscaling group 정보 가져오기\r\r\r\r\r블로그 커밋 메세지 만들고 자동 배포 하기\r\r\r\r\rMaven pom.xml 빌드 플러그인 세팅하기\r\r\r\r\rDB index의 정의\r\r\r\r\r컬렉션 프레임워크의 정의와 stream 사용법 간단 정리\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Python \rgetter setter 설정\r\r\r\r\r윈도우에서 Ubuntu로 pycharm 설치할 수 있을까\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Node.js \rpackage-lock.json 이란?\r\r\r\r\rformidable 설치 오류 해결하기\r\r\r\r\raws EC2로 node.js 배포하기\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": "Chapter 5 React \r데이터 테이블로 정렬하기\r\r\r\r\r테이블을 엑셀로 다운로드\r\r\r\r\rjavascript의 innerHTML과 같은 기능은?\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": "Chapter 99 Others\u0026hellip; \r[활동] Devfest Korea 2020 10.16~\r\r\r\r\rHugo로 블로그 만들기 1\r\r\r\r\rBooks\r\r\r\r[책] 오브젝트 (1)\r\r\r\r면접질문 정리\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/retro/",
	"title": "회고",
	"tags": [],
	"description": "",
	"content": "Chapter X 회고 \r20201101:WTM 해커톤 후기\r\r\r\r\r20200921: 카카오프로젝트100\r\r\r\r\r20200904:하반기 읽을거리\r\r\r\r\r20200902\r\r\r\r\r20200830: 블로그 이사\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/python/1/",
	"title": "getter setter 설정",
	"tags": ["Python", "TIL"],
	"description": "",
	"content": "Python : getter setter 설정 클래스 내부에서 getter setter 설정 쉽게하기 메서드 낭비하지 않고 쉽게 쓸 수 있다! 불러오는 방법이나 셋하는 방법도 java와 조금 다름. 주의할 것..\n# test.py class Test: def __init__(self, limit=None, persistent=None): if limit is None: self.__limit = False else : self.__limit = limit if persistent is None: self.__persistent = False else : self.__persistent = persistent @property def limit(self): return self.__limit @property def persistent(self): return self.__persistent @limit.setter def limit(self, limit): self.__limit = limit @persistent.setter def persistent(self, persistent): self.__persistent = persistent user = Test() # 값이 None, None 으로 나옴 # set: limit user.limit = True # get: limit  print(user.limit) "
},
{
	"uri": "https://mand2.github.io/react/1/",
	"title": "데이터 테이블로 정렬하기",
	"tags": ["React", "Table", "Sort", "TIL"],
	"description": "",
	"content": "\nreact table 사용하기 목적 원하는 list를 게시판 형식으로 가져온 후, 모든 컬럼을 sorting 하기 위함. 찾아보니 react-bootstrap-table-next 라는 걸 찾음.\n설치과정  react-create-app 사용(git push 후 babel 설정 modify + 그 외 기능들 추가) yarn add react-bootstrap-table-next 명령어로 react-bootstrap-table 설치   public/index.html 파일에 bootstrap CSS 추가해야 함! 이쁘게 보고싶다면 설치!   component에서 css 추가  import \u0026#39;react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\u0026#39;; \n결론은 회사에선 쓸 수 없음 ㅠ_ㅠ 기존 css 랑 충돌될 것 같음 ,,\n해결 ! index.html에 부트스트랩css 추가 안해도 됨. 테이블 형식으로 나오긴 하는데, 관련 css는 따로 작성해서 import 처리하면 된다 ㅎ\n\n출처 react-bootstrap-table2 doc LIVE DEMO 사이트\n\nApp.js import React, {Component} from \u0026#39;react\u0026#39;; import Table from \u0026#39;./components/table1\u0026#39;; class App extends Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;Table /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default App; \ntable1.js import React, { Component } from \u0026#39;react\u0026#39;; import Table2 from \u0026#34;./table2\u0026#34;; class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;Table2 /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; \ntable2.js import React, { Component } from \u0026#39;react\u0026#39;; import \u0026#39;react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\u0026#39;; import BootstrapTable from \u0026#39;react-bootstrap-table-next\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; class Table2 extends Component{ render(){ const products = [ { id: 0, name: \u0026#39;good\u0026#39;, price: 1000 }, { id: 1, name: \u0026#39;soso\u0026#39;, price: 1500 }, { id: 2, name: \u0026#39;bad\u0026#39;, price: 500 }, { id: 3, name: \u0026#39;good3\u0026#39;, price: 41000 }, { id: 4, name: \u0026#39;soso4\u0026#39;, price: 800 } ]; const columns = [ { dataField: \u0026#39;id\u0026#39;, text: \u0026#39;Product ID\u0026#39;, sort: true },{ dataField: \u0026#39;name\u0026#39;, text: \u0026#39;Product Name\u0026#39;, sort: true },{ dataField: \u0026#39;price\u0026#39;, text: \u0026#39;Product Price\u0026#39;, sort: true } ]; const defaultSorted = [{ dataField: \u0026#39;name\u0026#39;, order: \u0026#39;desc\u0026#39; }]; return( \u0026lt;div\u0026gt; \u0026lt;BootstrapTable keyField=\u0026#39;id\u0026#39; data={ products } columns={ columns } defaultSorted={ defaultSorted } striped hover /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table2; 기본적으로 가져올 때, name을 기준으로 desc형태로 가져옴. 각 컬럼을 누를 떄마다 desc/asc 형태로 된다.\n\u0026lt;BootstrapTable /\u0026gt; 의 필수 요소\n keyField data columns  \n손쉽게 정렬을 완성할 수 있다!\n"
},
{
	"uri": "https://mand2.github.io/spring/spring-boot/1/",
	"title": "spring.jpa.open-in-view 로그 오류 해결하기",
	"tags": [],
	"description": "",
	"content": "\n1. 문제상황 : 왜 로그에 warn이 뜨지? 스프링 부트 app을 시작하면 로그가 나오는데,\n잘 보면 아래와 같이 warning 메세지가 뜬다\naWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning\r\n2. 문제 이유 Spring Boot에서는 spring.jpa.open-in-view를 true로 설정하고 있는데, 이는 OSIV 측면에서 매우 부적절하다고 함. 즉 성능이나 scalability,, 즉 확장성 측면에서 볼 때 false로 해야 하는데 true로 하고 있어 warning 경고 사인이 뜨는 거라고.\n\n참고 사이트-스택오버플로우-로 바로가기\n3. 해결방안 검색결과 spring.jpa.open-in-view 설정을 true 에서 false로 바꿔주면 해결된다.\n바꿔주는 방법은 크게 두 가지 방법이 있다.\n application.properties에서 설정하기  spring.jpa.open-in-view=false   application.yml으로 설정 설정\n yaml으로 설정하는 방법은 여기에서 잘 설명하고 있다.\n관련 스프링 부트 doc 사이트로 가기\n   \n"
},
{
	"uri": "https://mand2.github.io/node.js/1/",
	"title": "package-lock.json 이란?",
	"tags": ["Node.js", "TIL"],
	"description": "",
	"content": "package-lock.json 파일이란? 프로젝트에 설치된 노드 모듈들의 의존성 트리를 기록하고 있음.\n\npackage-lock.json이 유용한 이유? git 저장소에 node.js 프로젝트를 커밋할 때 보통 node_modules 폴더는 부피가 커서 commit에 포함시키지 않습니다.이 때 package-lock.json 파일은 꼭 함께 커밋을 해주어야 합니다. 다른 팀원이 이 프로젝트를 처음 pull 받아서 npm install 을 했을 때 개발 당시의 동일한 버전의 모듈들이 설치됨을 보장하기 위함입니다. express 모듈을 프로젝트에 설치하게 되면 package.json 파일에 \u0026quot;express\u0026quot;: \u0026quot;~4.16.1\u0026quot; 처럼 Tilde Ranges 표기법으로 버전이 명시됩니다. 4.16.1 버전보다 높은 버전이 npm에 publish 된다면 node install 명령어로 로컬에 모듈을 설치하면 더 높은 버전의 express 모듈이 로컬에 설치가됩니다. 이는 개발당시의 버전과 달라져 예기치 않던 버그가 발생할 수 있습니다. 따라서 package-lock.json은 의존성 관리를 위해 필수이며 꼭 git 저장소에 commit 해야하는 대상입니다.\n\n 출처: https://simsi6.tistory.com/56 [곰돌푸우]\n"
},
{
	"uri": "https://mand2.github.io/spring/rest-api/methods/",
	"title": "Methods @Get, @Post, Delete, @Put",
	"tags": ["Spring", "Rest-API", "TIL"],
	"description": "",
	"content": "목적 @RestController 어노테이션을 이용한 RESTFUL로 변경하기\nbasics   Spring 4.0 버전 이후부터 @RestController 적용 가능\n  @GetMapping\nget으로 들어오는 URL 형식에 응답\n  @PostMapping\npost로 들어오는 URL 형식에 응답\n  @DeleteMapping\ndelete로 들어오는 URL 형식에 응답\n  @PutMapping\nput으로 들어오는 URL 형식에 응답\n  예제 @CrossOrigin @GetMapping public ResponseEntity\u0026lt;List\u0026lt;Member\u0026gt;\u0026gt; getAllList(){ List\u0026lt;Member\u0026gt; list = listService.getAllList(); ResponseEntity\u0026lt;List\u0026lt;Member\u0026gt;\u0026gt; entity = new ResponseEntity\u0026lt;List\u0026lt;Member\u0026gt;\u0026gt;(list, HttpStatus.OK ); return entity; } \nResponseEntity 란?    @ResponseBody 어노테이션 대신 사용\n  ResponseEntity \u0026lt; 반환형타입 \u0026gt;의 반환형타입에 객체 사용 가능.\n  ResponseEntity\u0026lt;List\u0026lt;Member\u0026gt;\u0026gt;(body, status)\n해당 메서드는 오버로딩되어있으며, body는 반환형타입과 같은 type이 들어가야 함\nstatus는 HttpStatus의 상태를 따로 지정함.\n  \nHttpStatus 종류  HttpStatus.OK 200정상 HttpStatus.NOT_FOUND 404에러 HttpStatus.INTERNAL_SERVER_ERROR 500에러  "
},
{
	"uri": "https://mand2.github.io/spring/user_register/1/",
	"title": "single-page 회원관리 폼 만들기",
	"tags": [],
	"description": "",
	"content": "  single page : CRUD(가입+수정+삭제+리스트 보여주기)를 Single page 처리 REST API 이용   개발순서 (MVC 2 패턴으로 함)\n DAO설정\nController\nService\nView\n 참고사항\n REST API 연습용입니다.\n기존에 사용하던 코드를 재활용하였으므로, 변수명의 차이가 있을 수 있습니다. 회원정보 수정에서의 parametertype 문제\nMap으로 설정해야 하나,\n빠르게 제작하기 위하여 model(DTO)인 EditMember를 parameter로 설정함. 회원가입시 not null 조건인 ID, PW, NAME만 기입하도록 하였습니다.  \n결과화면\n회원가입화면\n회원수정화면\n \nDAO 설정 //인터페이스 작성 public interface MemberDao { public Member selectById(String id) ; //회원한명의 정보가져오기(login + update ) \tpublic int deleteMember(int idx) ; //삭제 \t/* Rest Api를 위한 메서드 */ public List\u0026lt;Member\u0026gt; selectAllList(); public int insertMem(Member member); public int updateMem(Member member); //업데이트 수정 } \u0026lt;!-- mapper.xml 작성 --\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.ny.mm.dao.MemberDao\u0026#34;\u0026gt; \u0026lt;!-- SQL의 컬럼명과 객체의 변수명(field)이 다르므로 resultMap을 통해 호환가능하도록 만듬 --\u0026gt; \u0026lt;resultMap type=\u0026#34;com.ny.mm.model.member.Member\u0026#34; id=\u0026#34;MemberVO\u0026#34;\u0026gt; \u0026lt;result property=\u0026#34;idx\u0026#34; column=\u0026#34;idx_m\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;id\u0026#34; column=\u0026#34;id\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;pw\u0026#34; column=\u0026#34;pw\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;name\u0026#34; column=\u0026#34;name\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;photo\u0026#34; column=\u0026#34;photo\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;regDate\u0026#34; column=\u0026#34;regdate\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;phone\u0026#34; column=\u0026#34;phone\u0026#34;/\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- 회원한명의정보가져오기 --\u0026gt; \u0026lt;select id=\u0026#34;selectById\u0026#34; resultMap=\u0026#34;MemberVO\u0026#34; \u0026gt; select * from moonchild.member where id = #{id} \u0026lt;/select\u0026gt; \u0026lt;!-- 회원삭제 --\u0026gt; \u0026lt;delete id=\u0026#34;deleteMember\u0026#34;\u0026gt; delete from moonchild.member where idx_m = #{idx} \u0026lt;/delete\u0026gt; \u0026lt;!-- 회원리스트가져오기 --\u0026gt; \u0026lt;select id=\u0026#34;selectAllList\u0026#34; resultMap=\u0026#34;MemberVO\u0026#34;\u0026gt; select * from moonchild.member order by regdate desc \u0026lt;/select\u0026gt; \u0026lt;!-- 회원가입 --\u0026gt; \u0026lt;insert id=\u0026#34;insertMem\u0026#34; parameterType=\u0026#34;com.ny.mm.model.member.Member\u0026#34;\u0026gt; insert into moonchild.member (ID, PW, NAME) values (#{id}, #{pw}, #{name}) \u0026lt;/insert\u0026gt; \u0026lt;!-- 회원정보수정 --\u0026gt; \u0026lt;update id=\u0026#34;updateMem\u0026#34; parameterType=\u0026#34;com.ny.mm.model.member.EditMember\u0026#34;\u0026gt; update moonchild.member set name = #{name}, pw = #{pw} where idx_m = #{idx} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; \nController 설정  pw는 JsonIgnore로 설정되어 있음. /rest-api/members 공통 URI 설정 CRUD 설명  /rest-api/members method: GET 리스트 보여주기 /rest-api/members method: POST 회원가입 /rest-api/members/{id} method: GET 해당 아이디의 회원정보 보여주기(수정을 위함) /rest-api/members method: PUT 회원정보 수정 /rest-api/members/{idx} method: DELETE 회원 삭제(탈퇴)    \n회원수정(service, controller, DTO 등) 설명 회원수정이 가장 까다로웠으므로, REST API Controller 중 회원수정과 관련된 것(service와 controller, model 등)만 올립니다.\n\nservice @Autowired private SqlSessionTemplate template; private MemberDao dao; //수정할 멤버 가져오기 \tpublic Member select(String id) { dao = template.getMapper(MemberDao.class); Member member = dao.selectById(id); return member; } //해당멤버의 정보 변경 \tpublic int editRest(EditMember edit) { dao = template.getMapper(MemberDao.class); int result = 0; Member member = edit.toMemberRest(); result = dao.updateMem(member); return result; } \ncontroller @Controller @RequestMapping(\u0026#34;/rest-api/members\u0026#34;) public class RestApiController { @Autowired private memEditService editService; //수정:회원정보가져오기 \t@CrossOrigin @ResponseBody @RequestMapping(value = \u0026#34;/{id}\u0026#34;, method = RequestMethod.GET) public Member geteditMember(@PathVariable(\u0026#34;id\u0026#34;) String id) { return editService.select(id); } //회원수정 \t@CrossOrigin @ResponseBody @RequestMapping(method = RequestMethod.PUT) public int editMember(@RequestBody EditMember edit) { return editService.editRest(edit); } }    @Contoroller RestApiController 를 controller로 인식하도록 어노테이션 설정.     @CrossOrigin client와 server를 분리할 때 발생할 수 있는 크로스도메인 이슈를 해결하기 위한 설정. 해당 이슈는 서버측에서 해결하는 게 보편적이라 함. client가 요청하는 위치가 달라도 해당 메서드를 사용할 수 있도록 한다.    RequestParam 과 PathVariable\n RequestParam 은 naver.com/search?page=12 와 같이 URL 자체에 전달된 parameter를 호출\nPathVariable 은 naver.com/search/index/1 REST API에서 값을 호출할 때 사용\n RequestMapping의 value = \u0026ldquo;{ 템플릿변수 }\u0026ldquo;의 템플릿 변수와 @PathVariable 어노테이션에서 불러오는 템플릿 변수는 동일한 이름(변수명)을 갖는다. 해당 템플릿변수를 불러와 변수로 사용가능!     \nview //수정버튼 클릭시 실행(수정할 멤버의 정보 가져오기) function edit(id) { if(confirm(\u0026#39;정말 수정할거야?????리얼리????\u0026#39;)){ $.ajax({ url:\u0026#39;http://localhost:8080/mc/rest-api/members/\u0026#39;+id, type: \u0026#39;GET\u0026#39;, error: function() { alert(\u0026#39;error.....\u0026#39;); list(); }, success: function(data) { //alert(data.idx);  $(\u0026#39;#join\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;none\u0026#39;); //가입폼 안보이게 하고  $(\u0026#39;#edit\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;block\u0026#39;); //수정폼 보이게  var output = \u0026#39;\u0026#39;; output += \u0026#39;아이디는안바꿔줘\u0026#39; output += \u0026#39;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;\u0026#39;+data.id +\u0026#39;\u0026#34; disabled\u0026gt;\u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;패스워드는?????? \u0026#39;; output += \u0026#39;\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pw2\u0026#34; name=\u0026#34;pw\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;이름 좀 알려줄래?\u0026#39;; output += \u0026#39;\u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name2\u0026#34; name=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\\n\u0026#39;; output += \u0026#39;\u0026lt;span class=\u0026#34;submit\u0026#34; onclick=\u0026#34;getEdit(\u0026#39;+data.idx+\u0026#39;)\u0026#34;\u0026gt;\u0026#39;; output += \u0026#39;수정할래요오오오옹!\u0026lt;/span\u0026gt;\u0026#39;; $(\u0026#39;#editForm\u0026#39;).html(output); } }); } } //수정할래요오오오옹! 이라는 버튼을 클릭 할 때 (== 수정 update 전송 버튼) function getEdit(idx) { $.ajax({ url:\u0026#39;http://localhost:8080/mc/rest-api/members\u0026#39;, type: \u0026#39;PUT\u0026#39;, data: JSON.stringify({ idx: idx, pw : $(\u0026#39;#pw2\u0026#39;).val(), name : $(\u0026#39;#name2\u0026#39;).val() }), contentType: \u0026#39;application/json;charset=utf-8\u0026#39;, dataType: \u0026#39;json\u0026#39;, success: function(data) { if(data \u0026gt; 0 ){ alert(\u0026#39;수정되었습니다\u0026#39;); } else { alert(\u0026#39;실-패\u0026#39;); } }, error: function(){ alert(\u0026#39;error ㅠㅠㅠㅠ\u0026#39;); }, complete: function() { list(); $(\u0026#39;#edit\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;none\u0026#39;); $(\u0026#39;#join\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;block\u0026#39;); } }); } \nTIL   complete  를 쓰면 성공/에러에 상관없이 실행함.\n가독성이 좋아짐!\n순서는 success - complete 혹은 error - complete 순. edit 에서는 controller에서 Member 타입으로 받아오기 때문에 data.id 와 같이 get메서드를 호출 할 수 있다. getEdit 은 result값을 int 타입으로 받도록 만들어 success 에서 바로 체크하도록 함.   \n추가: EditMember public class EditMember { /** * 참고로 REST-API에서만 사용하는 변수/메서드만 편집하여 올림 * getter setter 설정하였음. */ private int idx; private String id; private String pw; private String name; public Member toMemberRest() { Member member = new Member(); member.setIdx(idx); member.setPw(pw); member.setName(name); return member; } } "
},
{
	"uri": "https://mand2.github.io/about/portfolio/",
	"title": "Portfolio",
	"tags": [],
	"description": "",
	"content": "portfolio created in Oct, 2019.\n"
},
{
	"uri": "https://mand2.github.io/python/2/",
	"title": "윈도우에서 Ubuntu로 pycharm 설치할 수 있을까",
	"tags": ["Python", "TIL"],
	"description": "",
	"content": "PyCharm 설치 ? 어쩌다보니(?)는 아니고, 자발적으로 파이썬 관련 업무를 맡게 되었다. 나아아-름 서버개발자라 윈도우 컴퓨터를 쓴다고 할지라도 리눅스 환경 + 가상환경으로 파이썬 개발을 하고자 했다. 오늘은 그 대서사시의 첫시작(\u0026hellip;)을 써보려고 한다.\n\n1. Ubuntu 18.04 1-1 설치방법(INSTALL)   windows - app 에서 설치\n  프로그램 설정 : 리눅스 허용 체크\n  Ubuntu 에서 user \u0026amp;\u0026amp; pw 설정\n  Ubuntu distro 세팅\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade   \n1-2 결과 WSL로 pycharm 세팅하려 했지만, snap 을 지원하지 않는다고 하여 실패.\n그럼 Ubuntu로 pycharm 설치하는 다른 방법이 없느냐?! 하면 있긴 있다. 그런데 stackoverflow에서 배포할 수 없다는 글을 봤다. pycharm이 interpreter 세팅을 할 때 remote 로만 인식하게 되기 때문이라고.\n Configuring PyCharm PyCharm should be configured to use WSL as a remote interpreter but without deployment, since each drive on Windows is mapped to an appropriate folder in /mnt/\u0026lt;DRIVE_NAME\u0026gt; in WSL. So, you only need to configure the mapping. For remote interpreters, see configuration-remote-python-interpreters . You should use 127.0.0.1 as hostname, and login and password you entered after first lxrun /install. You also should set C:\\ to /mnt/c/ in your mappings. See the video from the previous post. 전문 URL\n \n2. VSCode 우회하는 방법으로 Microsoft의 Visual Studio Code로 파이썬 설치하여 해봤음\n 장점  같은 회사에서 만든거라 연결하기는 간편함 python extention만 설치하면 되어 쉽다 여러 버전을 설치 후, bash 파일에서 alias 등록해서 사용하기도 쉽다 (리눅스니까,,)   단점  정말 여러가지 단점이 있지만 가장 극강은,,, VSCODE 자체의 에러 1 : setting.json 파일이 어찌나 여러 장소에 있는지\u0026hellip; 환경 설정 맞추다가 시간 다 감. 그리고 vscode는 1폴더 = 1프로젝트 라는 그지같은 공식이 있다. 이 공식을 없애려고 환경설정 여러가지로 했는데, 뭔가 꼬였는지 안됨. 결국 원인을 못찾고(남탓ㅋ) 하드코딩해버림,, path 설정을 각 파일마다 해줘야해서 귀찮음. VSCODE의 자체의 에러 2 : test or debug 에러. vscode의 github 이슈트래커를 봤는데, 관련 질문이 너어어어어어무 많음. vscode가 제대로 F/U을 하고있는지 의문이다. 답변으로는 해결했다고 하는데 바로 다음 답글로 안되는데? 가 달린다 ㅋㅋ 나도 따라해보다가 더 꼬여서 어디서부터 해결해야할지.. 에러가 난무하는 나의 vscode파이썬 환경설정\u0026hellip;   결론 python을 할거면, vscode는 시간낭비! 라는게 나의 결론. 물론 인텔리제이를 비롯한 프로젝트 별로 환경설정을 (비교적) 쉽게 할 수 있는 IDE에 물들어버린 탓도 있겠지만 vscode는 설정 에러가 너무 많아서(예상보다도 더) 시간 낭비하게 된다. 그래서 결국 pycharm을 찾았고\u0026hellip; 찾았으며\u0026hellip; 또 나는 jetbrain의 노예가 되었다\u0026hellip;  \n결론 윈도우 + WSL (Ubuntu 18.04) + Pycharm은 귀찮고, 아닌걸로. 그래서 window 용 파이참과 윈도우용 가상환경 파일을 설치해버렸다. ㅎ ㅏ\u0026hellip; 나의 원대한 꿈이 이렇게 막을 내리다니 😥\n그래서 1년 안에 맥을 구매하는 걸 목표로 했다. (돈을 모을 수 있을지 의문이긴 함) 답답해서 못해먹겠다싶고. 요즘들어 리눅스 환경에 관심이 생겼는데 윈도우에서는 뭔가 제약사항이 많다. 물론 내가 더 좋은 개발자라면 연장 탓을 안하겠지만 ㅎㅎ 아직 만 1년도 안되었으니 ㅎㅎㅎ 장비 탓을 하겠다!\n"
},
{
	"uri": "https://mand2.github.io/react/2/",
	"title": "테이블을 엑셀로 다운로드",
	"tags": ["React", "Table", "Excel", "TIL"],
	"description": "",
	"content": "\nexcel download 만들기 목적 전체 리스트를 테이블로 출력한 후, 화면에 보여지는 부분을 엑셀 형식으로 다운로드 가능하게 만들어 보자. 다운로드 창이 나오고, 다운로드 시 해당 파일명을 자동으로 설정까지 해주기!\nSpec  react.js ^16.8.6 mobx ^5.13.0  사실 구글에 검색하면 잘 나온다..(검색어 : Export html table data to Excel using JavaScript) 나는 그 글을 긁어왔을 뿐ㅎㅎ,, 다른 방법으로도 가능한데, 지금 내가 구현한 부분은 서버에 과부하를 생성하지 않도록 현재 화면에서 보여지는 것만 엑셀로 출력하도록 만든것임. 현재 화면 뿐만 아니라 전체 리스트를 다 갖고오고 싶다면 다른 방법을 써야 한다.\n\n01 Store.js @action download() { const table = document.getElementsByTagName(\u0026#39;table\u0026#39;)[0]; let tab_text = \u0026#39;\u0026lt;html xmlns:x=\u0026#34;urn:schemas-microsoft-com:office:excel\u0026#34;\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;head\u0026gt;\u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;application/vnd.ms-excel; charset=UTF-8\u0026#34;\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;xml\u0026gt;\u0026lt;x:ExcelWorkbook\u0026gt;\u0026lt;x:ExcelWorksheets\u0026gt;\u0026lt;x:ExcelWorksheet\u0026gt;\u0026#39; tab_text += \u0026#39;\u0026lt;x:Name\u0026gt;Test Sheet\u0026lt;/x:Name\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;x:WorksheetOptions\u0026gt;\u0026lt;x:Panes\u0026gt;\u0026lt;/x:Panes\u0026gt;\u0026lt;/x:WorksheetOptions\u0026gt;\u0026lt;/x:ExcelWorksheet\u0026gt;\u0026#39;; tab_text += \u0026#39;\u0026lt;/x:ExcelWorksheets\u0026gt;\u0026lt;/x:ExcelWorkbook\u0026gt;\u0026lt;/xml\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;; tab_text += \u0026#34;\u0026lt;table border=\u0026#39;1px\u0026#39;\u0026gt;\u0026#34;; let exportTable = table.cloneNode(true); tab_text += exportTable.outerHTML; tab_text += \u0026#39;\u0026lt;/table\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;; let data_type = \u0026#39;data:application/vnd.ms-excel\u0026#39;; let ua = window.navigator.userAgent; let msie = ua.indexOf(\u0026#34;MSIE \u0026#34;); let fileName = this.period + \u0026#39;_Table\u0026#39; + \u0026#39;.xls\u0026#39;; // browser 처리  if (msie \u0026gt; 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) { //ie 용  if (window.navigator.msSaveBlob) { let blob = new Blob([tab_text], { type: \u0026#34;application/csv;charset=utf-8;\u0026#34; }); navigator.msSaveBlob(blob, fileName); } } else { //그외  let blob2 = new Blob([tab_text], { type: \u0026#34;application/csv;charset=utf-8;\u0026#34; }); let filename = fileName; let elem = window.document.createElement(\u0026#39;a\u0026#39;); elem.href = window.URL.createObjectURL(blob2); elem.download = filename; document.body.appendChild(elem); elem.click(); document.body.removeChild(elem); } } \n02 Component.js import React, {Component} from \u0026#39;react\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; @inject(stores =\u0026gt; ({ store: stores.Store; })) @observer class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;button\u0026gt; \u0026lt;div onClick={ ()=\u0026gt; store.download() }\u0026gt;엑셀다운로드\u0026lt;/div\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; \n"
},
{
	"uri": "https://mand2.github.io/spring/spring-boot/2/",
	"title": "querydsl 설정하기",
	"tags": [],
	"description": "",
	"content": "\n1. QueryDSL 을 선택한 이유? 스프링 부트 + JPA 를 선택하면서 고민했던 사항이 테이블 연결이었다.\nJPQL로 간단하게 쿼리문을 불러오는 것이 아닌, 내가 원하는 쿼리문을 사용하기 어렵다는 문제점 때문이었다.\n많은 블로그에서 탐색한 결과, QueryDsl을 선택하였다. 비교적 직관적이며, join 중에서도 left outer join / right outer join 등 다양한 조인과 동적쿼리문 작성이 가장 좋아보였다. 사실은 criteriaBuilder를 사용할까 했는데 QueryDsl이 더 직관적이라 선택하였다. 조금 더 보기 편하달까.. 생각보다 많은 레퍼런스와 doc(문서)가 있고, 심지어 한글로 문서번역이 되어있어 편했다. maven 설정할 때 조금 애먹긴 했지만..\n\n2. maven 설정 레퍼런스에서는 gradle로 설정하는 방법이 많이 있는데 아직 초보개발자인 나로서는 (=배운 지식 활용하기에도 벅찬,,) 감수할 수 없는 위험이라 판단, 조금 더 친숙한 maven으로 dependency를 설정하였다.\n2-1 dependency 설정 \u0026lt;!-- querydsl --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.querydsl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;querydsl-apt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${querydsl.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.querydsl\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;querydsl-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${querydsl.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2-2 plug-in 설정 \u0026lt;!-- querydsl plugin --\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.mysema.maven\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;apt-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.3\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;process\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;outputDirectory\u0026gt;target/generated-sources/java\u0026lt;/outputDirectory\u0026gt; \u0026lt;processor\u0026gt;com.querydsl.apt.jpa.JPAAnnotationProcessor\u0026lt;/processor\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \n3. 플러그인 추가시 문제점 발생 플러그인을 추가할때  부분에서 에러가 발생했다.\n오류메세지는 You need to run build with JDK or have tools.jar on the classpath.\n!!주의!! 이 오류메세지가 뜨면 QClass 자체가 생성이 안되어 QueryFactory 사용 자체를 할 수가 없게된다.\nQClass란? QueryDsl에서 제공하는 클래스. 도메인(repository) 클래스가 자동으로 QClass로 변환되며(target/generated-sources/java 패키지에 자동 생성) 이 클래스를 QueryFactory에 주입하여 사용하게 된다.\n\n4. 문제점 해결 해결방법은 생각보다 간단하다.\n  이클립스 설치경로 혹은 STS 설치경로에 eclipse.ini 혹은 STS.ini 파일을 연다\n  아래의 두 줄을 추가하면 됨. 주의할 점은 -vmargs 설정 전에 써줘야 한다.\n-vm\rC:\\Program Files\\Java\\jdk1.8.0_211\\bin\\javaw.exe\r생각없이 사람들이 쓴 걸 복붙했는데 \\ 대신에 /로 루트설정이 되어있어서 sts실행 자체가 안되었었다. 사소한 부분이지만 루트는 역슬래쉬..!!\n  STS실행\n  해당 프로젝트 우클릭 \u0026gt; maven \u0026gt; Update Project.. 클릭하고 메이븐업데이트 및 클린 시키면 된다 !\n  "
},
{
	"uri": "https://mand2.github.io/node.js/2/",
	"title": "formidable 설치 오류 해결하기",
	"tags": ["Node.js", "TIL"],
	"description": "",
	"content": "\r\r위와 같이 npm에 formidable을 설정하려고 하니 package.json이 없다고 뜸\npackage.json은 해당 프로젝트 의존모듈 관리를 도와주기 때문에 설치해야 한다.\n정리:: npm 이란? node package manager : 모듈관리매니저\n\n1. 해당 프로젝트 디렉토리로 들어감 cd D:\\node\\nodeJS_test\r\n2. npm init 을 써준다 npm init -y\r 위의 이미지를 보면, package.json내부에 해당 프로젝트의 이름, 버전, 사용되는 모듈 등의 스펙을 볼 수 있다. 이 package.json을 통해 모듈 의존성 모듈 관리도 진행할 수 있다. 만약 어떤 오픈 소스를 다운 받을 때 이 package.json만 있다면 해당 오픈 소스가 의존하고 있는 모듈이 어떤 것인지. 그리고 그 모듈들을 아래 명령어로 한 번에 설치할 수 있다.\n\n3. formidable 설치 npm install formidable\r"
},
{
	"uri": "https://mand2.github.io/spring/user_register/2/",
	"title": "Spring handler 인터셉터",
	"tags": [],
	"description": "",
	"content": "\n필터와 인터셉터의 실행시기 차이? 실행시점은 차이가 있음\n인터셉터 중 핸들러인터셉터는 필터의 일종이긴 하나, 요청컨트롤러가 있고 확인이 된 후에 실행(컨트롤러 요청 전후) 됨\n핸들러 인터셉터 핸들러 인터셉터는 DispatcherServlet 이 컨트롤러를 호출하기 전과 후에 요청과 응답을 참조하거나 가공할 수 있는 일종의 필터\n필터와 인터셉터의 자세한 차이를 알고싶다면 여기로\n\nHandlerInterceptor 어떻게 쓸까? HandlerInterceptorAdaptor 클래스를 상속받은 뒤, 자신이 원하는 메서드만 오버라이딩하면 된다.\n~'Adaptor'가 붙어있는 클래스\r인터페이스 구현체이나, 안에 내용이 없음. 내가 구현하고자 하는 메서드만 재구성하면 됨. 즉 구현하지 않아도 될 메서드들은 구현하지 않음! 번거로움이 줄어든다.\r  HandlerMapping에 인터셉터 설정 (servlet-context.xml 에 등록)\n  Interceptor 실행순서?\npreHandle: HandlerMapping에 등록된 순서대로 실행\npostHandle: 등록 순서와 역순으로 실행\n  view 렌더링 한 후: \u0026lsquo;Interceptor 처리 완료 후\u0026rsquo; 혹은 \u0026lsquo;뷰 생성 후\u0026rsquo;라 할 수 있으며, 등록된 순서의 반대로 afterCompletion() 실행\n  1. servlet-context.xml 에 등록 \u0026lt;!-- interceptor 등록 --\u0026gt; \u0026lt;interceptors\u0026gt; \u0026lt;interceptor\u0026gt; \u0026lt;mapping path=\u0026#34;/member/mypage/**\u0026#34;/\u0026gt; \u0026lt;exclude-mapping path=\u0026#34;/member/mypage/help\u0026#34;/\u0026gt; \u0026lt;beans:bean class=\u0026#34;com.ny.mm.interceptor.AuthCheckInterceptor\u0026#34; /\u0026gt; \u0026lt;/interceptor\u0026gt; \u0026lt;/interceptors\u0026gt; \n2. interceptor class 등록  목표:\n세션에 loginInfo 속성이 존재하면 return true 해주기\n public class AuthCheckInterceptor extends HandlerInterceptorAdapter { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { //\t1. 현재 요청에서 세션객체 받기  HttpSession session = request.getSession(false); //\t2. loginInfo가 저장되어있는지,,  if(session != null \u0026amp;\u0026amp; session.getAttribute(\u0026#34;loginInfo\u0026#34;) != null) { return true; } //context 경로 지정해줘야한다.  response.sendRedirect(request.getContextPath() + \u0026#34;/login/form\u0026#34;); return false; } } \n3. VIEW 등록 (jsp) \u0026lt;%@ page language=\u0026quot;java\u0026quot; contentType=\u0026quot;text/html; charset=UTF-8\u0026quot;\rpageEncoding=\u0026quot;UTF-8\u0026quot;%\u0026gt;\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Insert title here\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;삐용삐용!!!!!!!!!!!! null pointer exception 발생!!!!!!!!!!!!\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r\n4. 결과페이지 확인 \n"
},
{
	"uri": "https://mand2.github.io/spring/rest-api/415-error-of-put/",
	"title": "@PutMapping 사용 시 415 오류 해결방법",
	"tags": ["Spring", "Rest-API", "TIL"],
	"description": "",
	"content": "원인? PUT일 때 ResponseEntity\u0026lt; String \u0026gt;으로 써야하지?  ResponseEntity\u0026lt;Integer\u0026gt; 일 때엔 아예 인식을 못함\n415 error 발생!\n    Exception 설명 응답코드     HttpMediaTypeNotSupportedException 요청의 Content Type을 핸들러가 지원하지 않는 경우 발생 415 - Unsupported Media Type    출처 (Spring Boot)오류 처리\n415 코드 해결방법 contentType을 JSON이라 명시해준다.\ncontentType: \u0026#39;application/json; charset=utf-8\u0026#39; \n1. JSON \u0026lt;\u0026gt; JSON 으로 변환해줘야 한다 request를 JSON으로 보냈다면, response도 JSON으로 보내줘야 한다.\n그래서 @RequestBody를 쓴다.\nJSON형태로 받게해주는 Annotation임\n2. tomcat의 문제 GET 혹은 POST 는 tomcat이 기본적으로 parsing 하게 하지만, PUT, DELETE는 parsing이 안됨,, 따로 server.xml에서 설정해야 함.\n3. 컨테이너의 Request Message Converter의 문제 앞의 `1번` 내용과 결을 같이 함.\rOKKY의 답변을 그대로 가져옴\r컨테이너가 Request 메시지의 컨버터를 선정하는 기준을 이해하시면 쉽습니다. HttpMessageConverter 인터페이스에는 canRead, canWrite 메서드가 있는데 아래처럼 생겼어요.\n@Override public boolean canRead(Class\u0026lt;?\u0026gt; clazz, MediaType mediaType) { // TODO Auto-generated method stub \treturn false; } @Override public boolean canWrite(Class\u0026lt;?\u0026gt; clazz, MediaType mediaType) { // TODO Auto-generated method stub \treturn false; } 인자에 clazz, mediaType이 보이실거에요. canRead의 clazz는 @RequestBody 어노테이션이 붙은 변수의 데이터 타입입니다. 위의 예제에서는 @RequestBody String input이니까 String이 되겠네요.. 두 번째 인자mediaType은 Request Header의 ContentType입니다. \u0026ldquo;application/json\u0026quot;으로 요청을 보내셨다면 MediaType.APPLICATION_JSON이 될 겁니다.\n어떤 요청이 들어왔고, 요청 URL을 핸들러 매핑이 조사하여 컨트롤러 메서드를 찾습니다. 찾은 핸들러의 인자에 @RequestBody가 있고, String 타입을 원하고 있습니다. 그러면 \u0026ldquo;현재 등록되어 있는\u0026quot;메시지 컨버터를 집합시켜 canRead에 String, MediaType.APPLICATION_JSON을 넣어 true를 반환하는 메시지 컨버터를 찾아요. 있으면 위임하여 처리시킵니다. 없으면 415를 뱉습니다..\nJackson 라이브러리를 추가하면 자동으로 MappingJackson2HttpMessageConverter 메시지 컨버터를 추가해 줍니다. 이 컨버터는 clazz가 String이고, mediaType이 APPLICATION_JSON이에요. 따라서 @RequestBody를 String으로 받으면 MappingJackson2HttpMessageConverter가 요청을 처리하구요 Object가 들어가면 메시지 컨버터는 canRead 메서드에서 false를 반환하므로 무시됩니다. 따라서 Object는 처리할 메시지 컨버터가 없어서 415를 뱉는 거에요.\n프론트에서 보내신 JSON객체는 보통 JSON.stringify()로 보내지요? 이는 JSON객체를 문자열화 하여 보내라는 의미라 컨트롤러에서는 \u0026ldquo;{name : value}\u0026rdquo; 이런 \u0026ldquo;문자열\u0026quot;로 도착하게 됩니다. 컨트롤러에서는 JSON객체가 아니라 그냥 문자열이에요\n이해가 잘 되셨는지 모르겠습니다. 아님 TMI라 알고 계신 것 까지 설명했나 모르겠네요;\n\n결과코드 VIEW function getEdit(idx) { $.ajax({ url:\u0026#39;http://localhost:8080/mc/rest/members\u0026#39;, type: \u0026#39;PUT\u0026#39;, data: JSON.stringify({ idx: idx, pw : $(\u0026#39;#pw2\u0026#39;).val(), name : $(\u0026#39;#name2\u0026#39;).val() }), contentType: \u0026#39;application/json; charset=utf-8\u0026#39;, success: function(data) { alert(data); if(data == \u0026#39;success\u0026#39; ){ alert(\u0026#39;수정되었습니다\u0026#39;); } else { alert(\u0026#39;실-패\u0026#39;); } }, error: function(data){ alert(\u0026#39;error ㅠㅠㅠㅠ\u0026#39;); alert(data); }, complete: function() { list(); $(\u0026#39;#edit\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;none\u0026#39;); $(\u0026#39;#join\u0026#39;).css(\u0026#39;display\u0026#39;,\u0026#39;block\u0026#39;); } }); } \nController //회원수정 @CrossOrigin @PutMapping public ResponseEntity\u0026lt;String\u0026gt; editMember(@RequestBody EditMember edit) { System.out.println(\u0026#34;edit :\u0026#34; + edit ); return new ResponseEntity\u0026lt;String\u0026gt;(editService.editRest(edit)\u0026gt;0 ? \u0026#34;success\u0026#34; : \u0026#34;fail\u0026#34;, HttpStatus.OK); }  문자열로 받을 때에는\nview에서 (ResponseEntity\u0026lt; String \u0026gt;) 과 같이 문자열로 받아온다면 dataType = json 으로 명시하지 않아야 함. json으로 명시하면 dataType 이 맞지 않아서 오류남.  "
},
{
	"uri": "https://mand2.github.io/react/3/",
	"title": "javascript의 innerHTML과 같은 기능은?",
	"tags": ["React", "TIL"],
	"description": "",
	"content": "\n리액트의 innerHTML 은 ? 목적 String으로 tag를 다 만들어서 컴포넌트에 넣고 싶은데, 왜 태그 인식이 안될까요,,, 에서 시작되었다. 호출할 컴포넌트에 String으로 넣어주면 알아서 될 줄 알았건만.. 변환이 안되어서 innterHTML도 써보고 여러가지 해봤는데 리액트는 기본적으로 innterHTML 자체를 인식하지 못한다고 한다.\n그러면 뭘 인식하져? 라고하면 아래의 글을 읽으면 됩니다 :-)\nHOW TO dangerouslySetInnerHTML 이라는 걸 태그 내부에 설정해주면 된다.\n\n01 Store.js /** ------------------------------------------------ * String 으로 받은 메세지 내부 html 형식으로 변환 * * ------------------------------------------------*/ setDetails(){ return {__html: `${this.message}`}; } @computed get showDetails(){ return( \u0026lt;div dangerouslySetInnerHTML={this.setDetails()} /\u0026gt; ); } \n02 Component.js import React, {Component} from \u0026#39;react\u0026#39;; import {inject, observer} from \u0026#34;mobx-react\u0026#34;; @inject(stores =\u0026gt; ({ store: stores.Store; })) @observer class Table extends Component{ render(){ return( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; {store.showDetails} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Table; \n질문! 왜 컴포넌트에서 store.showDetails 라고 하죠? 뒤에 () 를 왜 안쓰져..? 라고 하면 렌더링 하기 전부터 주입되어있는 상태라 가능함..으로 이해했다.(아니면 알려주세요) () 로 쓰면 function으로 인식되고, 내 기억상 에러가 났던 걸로 기억됨. 그리고 다른 메세지를 클릭해도 처음 클릭한 메세지가 계속 떠서 렌더링이 안되었다.\n이거 써보고 저거 써보고,, 완전히 이해하고 쓰는게 아니라 일단 돌아가게 구글신의 도움을 받아 만들고 있어서 세련되지 못하다는 점.\n"
},
{
	"uri": "https://mand2.github.io/spring/spring-boot/3/",
	"title": "maven 빌드 오류",
	"tags": [],
	"description": "",
	"content": "\n😱 왜 Spring Boot 배포가 되지 않는걸까? 프로젝트 팀 작업을 하면서 spring boot 배포를 하는 친구들이 build 오류가 난다고 했다. 처음엔 git에서 파일을 pull 할 때 제대로 못한게 아닐까 싶었는데, 그런 오류는 아니었다.\n해당 배포하는 깃에 들어가 파일을 보니, 다음과 같은 구조로 되어있었다.\n자세히보면 src/main/java/com/ycar 내부에 ~Application.java 라는 파일이 두개가 있다. 즉, @SpringBootApplication 어노테이션이 붙은 클래스가 두개이며, 어플리케이션 주입 처리가 잘못되어있다는 것을 알 수 있다.\n\n심지어 pom.xml 에서 @SpringBootApplication이 시작하는 루트도 잘못되어 있음을 알 수 있다\n\u0026lt;groupId\u0026gt;com.exmaple\u0026lt;/groupId\u0026gt; 이 아니라,\n\u0026lt;groupId\u0026gt;com.ycar.boot\u0026lt;/groupId\u0026gt; 로 시작해야한다.\n\n🔑 maven build 오류가 있다! 현재 오류의 문제점은\n  package 루트가 중복으로 되어있다는 점 src/main/java/com/ycar 내부에 par과 passenger 로 나뉘어야 한다.\n현재는 passenger 패키지 부분이 중복으로 들어가 있는 것을 알 수 있다. 아마 버전 업데이트를 하면서 복사-붙여넣기를 하다 중복이 된 것이 아닐까 싶다.\n  pom.xml 에서 groupId와 artifactId, name을 변경해야 한다. 기존에 setting 했던 id와 name이 덮어씌워지면서 충돌이 나고 있다.\n  test 패키지에 있는 passenger 파일도 삭제해야 한다. @SpringBootApplication 을 하나로 명시하고자 하기때문에, test 패키지도 정리해야 한다.\n   build 실패를 위의 문제점 1~3 과 같이 어림짐작으로 해결했는데, 왜 이렇게 되는지 그 원인과 구조를 알고싶었다. 이거는 여기로 올 것.\n\n"
},
{
	"uri": "https://mand2.github.io/node.js/3/",
	"title": "aws EC2로 node.js 배포하기",
	"tags": ["Node.js", "TIL"],
	"description": "",
	"content": "1. node.js로 서버 배포하기 마지막 프로젝트를 하며 간단한 채팅을 node.js로 만들었다. 간단하게 구현하는 건 어찌어찌 했는데,, 문제는 배포하는 것. 주변에 구현하면서 고생한 친구가 있어서 편하게 했다.\n\n[STEP 1] 인스턴스 생성부터 - putty 설정까지  aws ec2 인스턴스 생성\n프리티어만으로 체크한 후\nAmazon Linux AMI 2018.03.0 (HVM), SSD Volume Type 를 선택했다\n자동으로 선택되어 있는 t2.micro 로 했으며,\n관리하기 쉽게 보안그룹 이름을 내가 원하는 이름으로 변경함. pem 키 발급 (인증키임.. 재발급 불가라 잃어버리면 새로 인스턴스 생성해야함 ㅠ)\n알아보기 쉽게 키 페어 이름을 잘 적어준다\n외장하드나 개인이 보관하기 쉬운 파일에 저장하기 puttygen.exe 로 ppk 키로 발급받기 LOAD 를 눌러 방금 발급받은 pem 키를 불러온다\nsave private key 를 눌러 ppk키로 저장 (동일한 이름으로 하되, 확장자만 달라야 함. 다르면 서버에러) putty.exe를 실행 새로운 session을 만들고 저장한다\n주의: hostname과 이름을 만들고 \u0026lsquo;save\u0026rsquo; 버튼을 눌러줘야 함.  session 탭:\nHostName은 ec2-user@(ip주소) Connection - SSH - Auth 탭:\nppk키를 저장해준다.   putty에서 저장한 세션을 open  [STEP 2] git 클론 후 node js 배포하기   현재 ec2 인스턴스에 깃 설치\nsudo yum install git\rgit init\rgit config --global user.name \u0026quot;your username\u0026quot;\rgit config --global user.email [your mail address]\r주의할 점: \u0026quot; \u0026quot; 와 [ ] 를 무조건 써준다! 안써주면 인식을 못함!\n  nvm 설치\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\r  nvm 활성화\n. ~/.nvm/nvm.sh\r  node 설치\nnvm install node\r  설치 확인\nnode -e \u0026quot;console.log('Running Node.js ' + process.version)\u0026quot;\r  깃에 배포용 repository 생성\n  해당 repository의 주소 복사 후 현재 ec2 인스턴스로 클론하기\ngit clone + [repository 주소]\r  node js 에서 연습했던 대로 서버 실행\n  하면 끝인 줄 알았지? 는 안됨!\n  \n노드서버 백그라운드 실행하기   일단 현재 채팅용 포트를 설정하지 않았음. AWS의 보안그룹으로 들어가서 ec2 인스턴스 생성시 만들었던 보안그룹으로 들어간다. 인바운드 탭에서 사용자지정TCP규칙 \u0026gt; 원하는 채팅포트 \u0026gt; 저장\n  위의 1번을 해결한다고 해도 완벽하게 해결되는 건 아님 이유? 내가 putty를 꺼도 실행이 되어야 확실한 배포인 거니까\n  백그라운드 실행하기 1 forever 설치\nnpm install forever -g\r  백그라운드 실행하기 2 원하는 js파일 실행하기\n(실행파일 위치까지 들어간 후) forever start [js script]\r  현재 백그라운드로 실행중인 서버 확인하기\nforever list\r  백그라운드 서버 종료하기\nforever stop [js script]\r  \n참고) nohup으로 했으나 실행되지 않았음\n nohup으로 백그라운드 실행  $ sudo nohup node (js파일) \u0026amp;\r  실행 후 백그라운드로 올라왔으면 ENTER 키로 빠져나오면 된다.\n  프로세스 실행되고 있는지 확인\n$ ps -ef\r  종료\nsudo kill -9 [종료하고 싶은 프로세스 pid]\r  \n"
},
{
	"uri": "https://mand2.github.io/spring/rest-api/statustext_parser_error/",
	"title": "statustext parsererror 해결방법",
	"tags": ["Spring", "Rest-API", "TIL"],
	"description": "",
	"content": "200 도 뜨는데 왜 에러로 걸리지? Spring으로 회원가입 페이지를 만들었다. 회원가입하기 버튼을 눌렀을 때 콘솔에서 에러로 들어왔다고 나왔다. DB에 제대로 들어가는 건 함정\u0026hellip;\n서버쪽에서 제대로 넘어갔고, 200으로도 뜨는데 왜 ajax로 넘어올 때 success가 아닌 error로 넘어갈까 찾아보았다.\n$.ajax({ url: \u0026#39;\u0026#39;, type: \u0026#39;post\u0026#39;, data: JSON.stringify(all), contentType : \u0026#39;application/json;charset=utf-8\u0026#39;, dataTyep: \u0026#39;json\u0026#39;, success: function(data){ if(data == \u0026#39;success\u0026#39;){ console.log(\u0026#39;success성공\u0026#39;); } else if(data == \u0026#39;fail\u0026#39;){ console.log(\u0026#39;success:실패\u0026#39;) } else { console.log(\u0026#39;success:요상한값들어간듯,\u0026#39; + data) } }, error: function(data){ console.log(\u0026#39;에러\u0026#39;+ data); console.log(\u0026#39;에러\u0026#39;+ JSON.stringify(data)); } 찾아보니 dataType이 맞지 않아 생기는 오류라고.\n\nStackOverFlow 와 구글링을 통해 찾은 해결방법   dataType을 지워라\n  dataType = \u0026lsquo;text\u0026rsquo; 로 해라\n  header값에 캐릭터셋을 UTF-8로 오도록 설정해라.\n  나는 dataType을 지움으로써 해결함.\nController 에서 ResponseBody에 String으로 주는 걸 설정해놨었기 때문에 \u0026lsquo;success\u0026rsquo;라는 단어가 맞으면 성공으로 뜨게 만듬.\n\n결과 "
},
{
	"uri": "https://mand2.github.io/spring/user_register/3/",
	"title": "Spring 웹상에서 메일 보내보기",
	"tags": [],
	"description": "",
	"content": "웹상에서 메일 보내보기 목차  설정\n-1 pom.xml\n-2 servlet-context\n-3 Controller\n-4 왜 MailSender 사용가능할까?\n-5 보낸사람이 다를 때? Java Mail API로 메일 작성하기\n-1 Java Mail API 란?\n-2 HTML 형식으로 보내기\n-3 파일 첨부하기  \n설정부터 해보자! 1. pom.xml에서 메일 설정 \u0026lt;!-- 메일 설정 시작 --\u0026gt; \u0026lt;!-- javax.mail/mail --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.mail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mail\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.7\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-context-support\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${org.springframework-version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \n2. servlet-context 설정 \u0026lt;beans:bean id=\u0026#34;mailSender\u0026#34; class=\u0026#34;org.springframework.mail.javamail.JavaMailSenderImpl\u0026#34;\u0026gt; \u0026lt;beans:property name=\u0026#34;host\u0026#34; value=\u0026#34;smtp.gmail.com\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;port\u0026#34; value=\u0026#34;587\u0026#34; /\u0026gt;\u0026lt;!-- 465 or 25 --\u0026gt; \u0026lt;beans:property name=\u0026#34;username\u0026#34; value=\u0026#34;본인 이메일 계정\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;password\u0026#34; value=\u0026#34;해당 계정의 비밀번호\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;defaultEncoding\u0026#34; value=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;beans:property name=\u0026#34;javaMailProperties\u0026#34;\u0026gt; \u0026lt;beans:props\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.transport.protocol\u0026#34;\u0026gt;smtp\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.smtp.auth\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.smtp.starttls.enable\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;beans:prop key=\u0026#34;mail.debug\u0026#34;\u0026gt;true\u0026lt;/beans:prop\u0026gt; \u0026lt;/beans:props\u0026gt; \u0026lt;/beans:property\u0026gt; \u0026lt;/beans:bean\u0026gt; \n3. Controller 작성 @Controller public class MailSendController { @Autowired MailSender sender; @ResponseBody @RequestMapping(\u0026#34;/mail/send\u0026#34;) public String sendMail() { //메일내용설정해주기 \tSimpleMailMessage message = new SimpleMailMessage(); message.setTo(\u0026#34;보내는사람 이메일~~\u0026#34;); message.setSubject(\u0026#34;hiiiiiiiiiiiii\u0026#34;); message.setText(\u0026#34;my first email to send a letter\u0026#34;); message.setFrom(\u0026#34;받는사람 이메일!!\u0026#34;); sender.send(message); return \u0026#34;send OK\u0026#34;; } } \n왜 MailSender를 사용할 수 있을까? bean으로 설정된 mailSender는 JavaMailSenderImpl 클래스임.\n이 클래스는 JavaMailSender 인터페이스의 구현체. JavaMailSender를 살펴본다면,\npublic interface JavaMailSender extends MailSender {} 즉, MailSender를 상속받기 때문에 다형성이 가능하므로 컨트롤러에서 MailSender 클래스를 주입받을 수 있게 된다.\n\n보낸사람을 설정해줬는데도 bean에서 설정한 메일주소로 보내지는 이유 google의 보안정책이 바뀌어서 설정된 계정으로만 보내짐.\ngoogle 계정을 쉽게 만들 수 있기도 하고, 이를 악용하여 악성코드를 보낼 수도 있기 때문인게 아닌가 싶다.\n\n그러면 이제 Java Mail API로 메일을 작성해보자! Java Mail API 가 뭐야?  파일 첨부 또는 HTML로 구성되어 있는 경우 MimeMessage 이용  JavaMailSender 인터페이스는 MimeMessage 객체를 생성해주는 createMimeMessage() 메서드를 제공 이 메서드가 리턴한 MimeMessage 객체를 이용해서 메시지를 구성한 뒤 메일 발송  \n1. HTML 형식으로 보내보기 @Autowired JavaMailSender jmsender; @ResponseBody @RequestMapping(\u0026#34;/mail/send/javamail\u0026#34;) public String sendJavaMailSender() { MimeMessage message = jmsender.createMimeMessage(); try { //메일제목설정  message.setSubject(\u0026#34;[안내] 처음보내는 JAVAMAIL SENDER\u0026#34;, \u0026#34;utf-8\u0026#34;); //html메일내용  String htmlStr = \u0026#34;\u0026lt;h1 style=\\\u0026#34;color: lightblue;\\\u0026#34;\u0026gt;hi everyone~~\u0026lt;/h1\u0026gt;\u0026#34; + \u0026#34;\u0026lt;a href=\\\u0026#34;http://www.naver.com\\\u0026#34;\u0026gt;naver\u0026lt;/a\u0026gt;\u0026#34;; //내용설정  message.setText(htmlStr, \u0026#34;utf-8\u0026#34;, \u0026#34;html\u0026#34;); //TO 설정  message.addRecipient(RecipientType.TO, new InternetAddress(\u0026#34;받는사람메일계정\u0026#34;, \u0026#34;mand2 님\u0026#34;, \u0026#34;utf-8\u0026#34;)); jmsender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return \u0026#34;send OK\u0026#34;; } setText 메서드: subtype을 설정해주지 않으면 그냥 다 전해짐,, 태그를 텍스트로 인식!\nTo설정에서 new InternetAddress를 사용하는 이유?\n받는사람의 메일계정이 아닌 사용자 이름으로 보내줄 수 있음\n2. 파일 첨부해서 보내보기 스프링이 제공하는 MimeMessageHelper 클래스를 사용\n@RequestMapping(\u0026#34;/mail/send/file\u0026#34;) @ResponseBody public String sendFileAttach() { MimeMessage message = jmsender.createMimeMessage(); try { MimeMessageHelper helper = new MimeMessageHelper(message, true, \u0026#34;utf-8\u0026#34;); //title  helper.setSubject(\u0026#34;[info] file attatched\u0026#34;); //content html  String htmlStr = \u0026#34;\u0026lt;h1\u0026gt;file has been attatched.\u0026#34; + \u0026#34;please download the file I send \u0026lt;/h1\u0026gt;\u0026#34;; //content setting  helper.setText(htmlStr, true); //to  helper.setTo(new InternetAddress(\u0026#34;받는사람 메일주소\u0026#34;, \u0026#34;만득이 님\u0026#34;, \u0026#34;utf-8\u0026#34;)); //create file instance + absolute root  DataSource dataSource = new FileDataSource(\u0026#34;절대경로루트\u0026#34;); helper.addAttachment(MimeUtility.encodeText(\u0026#34;파일이름\u0026#34;, \u0026#34;utf-8\u0026#34;, \u0026#34;B\u0026#34;), dataSource); jmsender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return \u0026#34;send ok\u0026#34;; } #1 MimeMessage 객체로 메세지생성\n#2 MimeMessageHelper 객체 생성 ( 메세지객체, 파일유무, charset)\n#3 메일 제목 설정\n#4 내용 html 설정\n#5 받는사람 설정\n#6 보낼 파일 설정\n​\t파일 위치\n​\t파일이름 설정\n​\t- MimUtility 의 encodeText 메서드를 이용\n​\t- 파일이름(한글일 때) 설정\n#7 해당 메세지 객체를 send 해주기\n\n"
},
{
	"uri": "https://mand2.github.io/spring/user_register/4/",
	"title": "회원가입 시 이메일 인증처리",
	"tags": [],
	"description": "",
	"content": "\r회원 가입 시 email을 받고 인증 코드를 생성, 해당 email 계정으로 인증 처리 메일을 보내보자!\n관리자가 보낸 인증코드가 맞다면 인증 완료처리까지-\n\r먼저 mySQL에서 컬럼 추가해준다.\n-- 인증코드와 verify 확인 코드 ALTER TABLE `project_01`.`memberinfo` ADD COLUMN `code` VARCHAR(25) NULL AFTER `REGDATE`, ADD COLUMN `verify` CHAR(1) NULL DEFAULT \u0026#39;N\u0026#39; AFTER `code`, ADD COLUMN `email` VARCHAR(45) NULL AFTER `verify`; \nDAO 변경 DAO 변경\n//verify public int updateVerify(String id, String code); public int updateEmail(Member member); \nMapper. xml 변경\n\u0026lt;!-- result map 설정 추가 --\u0026gt; \u0026lt;resultMap type=\u0026#34;com.ny.mm.model.Member\u0026#34; id=\u0026#34;MemberVO\u0026#34;\u0026gt; \u0026lt;result property=\u0026#34;idx\u0026#34; column=\u0026#34;idx\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;id\u0026#34; column=\u0026#34;id\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;pw\u0026#34; column=\u0026#34;pw\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;name\u0026#34; column=\u0026#34;name\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;photo\u0026#34; column=\u0026#34;photo\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;regDate\u0026#34; column=\u0026#34;regdate\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;code\u0026#34; column=\u0026#34;code\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;verify\u0026#34; column=\u0026#34;verify\u0026#34;/\u0026gt; \u0026lt;result property=\u0026#34;email\u0026#34; column=\u0026#34;email\u0026#34;/\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- 회원가입시 code, email도 DB에 연결해주기 --\u0026gt; \u0026lt;insert id=\u0026#34;insertMember\u0026#34; parameterType=\u0026#34;com.ny.mm.model.Member\u0026#34;\u0026gt; insert into project_01.memberinfo (ID, PW, NAME, PHOTO, CODE, EMAIL) values (#{id}, #{pw}, #{name}, #{photo}, #{code}, #{email}) \u0026lt;/insert\u0026gt; \u0026lt;!-- 인증 확인 처리 --\u0026gt; \u0026lt;update id=\u0026#34;updateVerify\u0026#34;\u0026gt; update project_01.memberinfo set verify = \u0026#39;Y\u0026#39; where id = #{param1} and code = #{param2} \u0026lt;/update\u0026gt;\t\nmodel에 변수 추가 변경해야 할 java 파일 : -Member.java\n-JoinRestApiRequest.java //회원 가입 시 받는 객체\n-LoginInfo.java //로그인 할 때 생성하는 객체 -VerifyMember.java : 새로 생성하는 파일\n\rMember.java @JsonIgnore private String code; private char verify; private String email; public Member(String id, String email) { this.id = id; this.email = email; randomCode(); } //영대소문자+숫자 난수 public void randomCode() { StringBuffer temp = new StringBuffer(); Random rnd = new Random(); String str = String.valueOf( (char) (rnd.nextInt(26) + 97) ); for(int i = 0; i \u0026lt; 10; i++) { //10자리 난수발생  int index = rnd.nextInt(3); //숫자 012 중에서 난수 발생시킴  switch (index) { case 0: //97~122 a-z의 아스키코드  temp.append((char)(rnd.nextInt(26) + 97)); break; case 1: temp.append((char)(rnd.nextInt(26) + 65)); break; case 2: temp.append(rnd.nextInt(10)); break; } } System.out.println(\u0026#34;난수코드생성: \u0026#34; + temp); setCode(temp.toString()); } 다른 파일들은 변수 추가하고 getter, setter 설정과 toString 오버라이딩 정도로 하면 됨.\nService 단: MailSenderService.java 파일 생성\nJoinService 파일 변경 MailSenderService.java 생성 @Service(\u0026#34;mailSenderService\u0026#34;) public class MailSenderService { @Autowired private JavaMailSender sender; public int send(Member member) { int result = 0; MimeMessage message = sender.createMimeMessage(); String name = member.getName() + \u0026#34; 님\u0026#34;; String email = member.getEmail(); String id = member.getId(); String code = member.getCode(); try { message.setSubject(\u0026#34;[info] Welcome TO Our WEBSITE\u0026#34;, \u0026#34;utf-8\u0026#34;); String htmlMsg = \u0026#34;\u0026lt;h1\u0026gt;회원가입을 축하합니다~\u0026lt;/h1\u0026gt;\u0026#34;; htmlMsg += \u0026#34;\u0026lt;h1\u0026gt;사랑합니다 \u0026#34;+name+\u0026#34;!\u0026lt;/h1\u0026gt;\u0026#34;; htmlMsg += \u0026#34;\u0026lt;a href = \\\u0026#34;http://localhost:8080/mm/join/verify?id=\u0026#34;+id+\u0026#34;\u0026amp;code=\u0026#34;+code+\u0026#34;\\\u0026#34;\u0026gt;인증하기 클릭\u0026lt;/a\u0026gt;\u0026#34;; message.setText(htmlMsg, \u0026#34;utf-8\u0026#34;, \u0026#34;html\u0026#34;); message.addRecipient(RecipientType.TO, new InternetAddress(email, name, \u0026#34;utf-8\u0026#34;)); sender.send(message); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return 1; } } id를 이메일 계정으로 받지 않고 이메일 계정을 따로 만들었으므로, 보낼 때 id, name, email 등등 여러가지를 parameter로 넘기는게 번거로워서 Member객체로 바로 넘겨버림.\n인증을 할 때 \u0026lt;a\u0026gt;태그에 가입한 사람의 아이디와 코드를 보내준다.\nmail 보내는 설정을 자세하게 알고싶다면 여기로\n\nJoinService 변경 @Autowired private MailSenderService mailService; //가입 서비스 rest + email 사용 public int joinMember( HttpServletRequest request, JoinRestApiRequest joinMember ) { /*생략*/ //파일 올렸을 때  if(joinMember.getPhoto() != null) { //file을 서버의 지정 경로에 저장.  newFileName = System.nanoTime() + \u0026#34;_\u0026#34; + joinMember.getId(); joinMember.getPhoto().transferTo(new File(dir, newFileName)); //데이터베이스 저장을 하기위한 파일이름 세팅  memberinfo.setPhoto(newFileName); } result = dao.insertMember(memberinfo); mailService.send(memberinfo); /*생략*/ return result; } join을 하면서 바로 같이 mailService의 send메서드를 통해 인증메일 보냄.\n\nController: 이메일 인증 처리해주기 @Controller public class VerifyController { @Autowired private VerifyService verifyService; @RequestMapping(\u0026#34;/join/verify\u0026#34;) public String verify(@RequestParam(\u0026#34;id\u0026#34;)String id, @RequestParam(\u0026#34;code\u0026#34;)String code) { return \u0026#34;join/verify_\u0026#34; + verifyService.verify(id, code); } } 인증처리가 제대로 되었다면 join/verify_Y로, 아니라면 join/verify_N 이라는 이름의 view로 들어가게 설정\n메일함을 열어본다면 이렇게 나온다\n결과화면: 인증완료 결과화면: 인증미완료 \n"
},
{
	"uri": "https://mand2.github.io/spring/rest-api/libraries-for-client/",
	"title": "REST API Client에서 호출가능한 Library",
	"tags": ["Spring", "Rest-API", "TIL"],
	"description": "",
	"content": "\n우리 팀은 MSA 방식으로 웹 어플리케이션을 만들기 때문에 api 통신이 중요하다. api 통신을 하기 위해서 client 단에서 호출 가능한 library가 무엇이 있는지 찾아보았다. 크게 두 라이브러리를 사용하는데, HttpURLConnection 과 RestTemplate 이다.\n\n1 HttpURLConnection void sendRequest(String request) { // i.e.: request = \u0026#34;http://example.com/index.php?param1=a\u0026amp;param2=b\u0026amp;param3=c\u0026#34;;  URL url = new URL(request); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setDoOutput(true); connection.setInstanceFollowRedirects(false); connection.setRequestMethod(\u0026#34;GET\u0026#34;); connection.setRequestProperty(\u0026#34;Content-Type\u0026#34;, \u0026#34;text/plain\u0026#34;); connection.setRequestProperty(\u0026#34;charset\u0026#34;, \u0026#34;utf-8\u0026#34;); connection.connect(); } \n2 RestTemplate DOCS\n요즘 들어 선호하는 형태는 postForObject . 어떤 형태로든 받아 올 수 있어서 개발 생산성이 조금 더 높은 것 같다. uriVariables 형태도 있어서 https://naver.com/{id}/posts/{index} 이런 형식으로 url을 작성하면 더 간편하게 구현할 수 있다.\n물론 #1의 HttpURLConnection 보다 속도가 느림. 가벼운 건 아님. 조금 더 안정성이 높다고 하는데 그건 잘 모르겠고 개발할 때 조금 더 간편하고 길게 쓰지 않아도 되어서 선호하는 편.\n\n3 개발하며 느낀 점 예전부터 RestTemplate을 사용하는 걸 선호했던 터라 HttpURLConnection 의 필요성을 느끼지 못했다. 그런데 모듈형식으로 생각한다면 HttpURLConnection을 사용하는 게 더 관리하기 용이하다고 생각했다. 호출하는 형식이 거기서 거기 + 메서드에 HttpMethod 형식을 어떻게 받아올 건지만 세팅해주면 되니까\u0026hellip; 일단 api 만들고 다시 리팩토링 해야지\u0026hellip; 😥 resttemplate을 더 효율적으로 사용하는 방법은 나중에 찾아봐야겠다.\n\n참고 주소  HttpURLConnection과 RestTemplate 등 다른 라이브러리를 잘 설명한 스택오버플로우 한글로 된 설명 Aaron_h님 블로그  "
},
{
	"uri": "https://mand2.github.io/spring/spring-boot/4/",
	"title": "@SpringBootApplication",
	"tags": [],
	"description": "",
	"content": "@SpringBootApplication 이란? 잠시 돌아가서, 이 @SpringBootApplication이 뭐기에 빌드 오류를 뱉어내는지 보자\n1. @SpringBootApplication의 의미는 @Configuration + @EnableAutoConfiguration + @ComponentScan 을 합친 것이다.\n-1 @Configuration 이란?  현재 클래스가 Spring의 설정 파일임을 알려주는 어노테이션 == Spring이 Java config로 간주한다! Configuration을 클래스에 적용하고 @Bean을 해당 클래스의 메소드에 적용하면\n@Autowired로 빈을 부를 수 있다. 개발자가 생성한 class를 Bean으로 생성 할 때 Single Tone으로 한번만 생성하고\n@Component는 Bean을 생성 할 때 java에서 new로 생성하듯이 생성한다.  -2 @EnableAutoConfiguration 이란?  Spring boot 클래스패스 세팅 및 다양한 Bean 추가 등을 시켜주는 어노테이션 어플리케이션에 추가된 설정들을 자동으로 추가해주는 어노테이션  -3 @ComponentScan 이란?   다른 컴포넌트, 서비스, 설정 등을 찾을 수 있게 도와주는 어노테이션\n즉 자바 클래스를 스프링 빈이라고 표시하고\n스프링의 component-scanning 기술을 통해 ApplicationContext에 빈으로 등록하게 하는 역할\n  == @Component를 검색하도록 도와준다\n  @Configuration 클래스도 컴포넌트로서 검색 대상이 된다.\n 스프링은 기본적으로 객체를 자동으로 생성하여 관리하기 때문에 @Component 어노테이션이 있는 클래스들을 스프링 컨테이너가 생성해준다. @ComponentScan는 특별히 basePackage를 지정하지 않아도 main class가 위치한 패키지를 Root package로 하여 그 이하의 모든 컴포넌트 클래스들을 검색하여 빈으로 등록한다.\n   메인 클래스인 YcarBootServerApplication 를 보면, 이 클래스는 com.ycar.boot 패키지에 있다. 이 패키지가 컴포넌트 스캔의 루트패키지가 된다. 따라서 com.ycar.boot 패키지를 기준으로 그 하위에 있는(== 하위 패키지) 모든 컴포넌트들을 검색한다.\n  (주의) pom.xml에서 루트 패키지를 정확하게 매칭시켜야 한다.\n  Spring XML설정의 \u0026lt;context:component-scan\u0026gt;을 대신해 자바에 설정\n  컴포넌트에 대해서는 아래에 따로 기술!\n  \n2 @Component : @Repository, @Service, @Controller @Repository, @Service, @Controller는 @Component에 속한 어노테이션이다.\n2 - 1 왜 @Component 대신 쓸까?  @Repository\n@Service\n@Contoller - @RestController\n ** 3가지 종류의 컴포넌트가 다른 이름을 가진 이유는 레이어를 구분하기 위함\n2 - 2 @Repository 어노테이션 DAO에 특화된 어노테이션이다. @Component 어노테이션을 써도 상관없지만, DAO 클래스들에 @Repository 어노테이션을 사용함으로써 @Component 어노테션이 가진 특성과 함께, DAO의 메소드에서 발생할 수 있는 unchecked exception들을 스프링의 DataAccessException으로 처리할 수 있는 장점 또한 가질 수 있다.\n2 - 3 @Service 어노테이션 서비스 레이어 클래스들에 사용되어지는 어노테이션이다. 역시나 @Component 어노테이션을 사용해도 상관없다. @Service 어노테이션을 사용함으로써 해당 클래스가 서비스 레이어 클래스라는 것을 명확하게 할 수 있다. 현재는 @Repository 어노테이션 처럼 추가적인 behavior는 없지만, 추후에 추가될 예정이다.\n2 - 4 @Controller 어노테이션 MVC 패턴에서 Controller 클래스에 선언되어진다. 이 또한 @Component 로 대체할 수 있다. 하지만, @Controller 어노테이션을 사용함으로써 @RequestMapping 등의 추가적인 어노테이션을 사용할 수 있게 된다.\n2 - 5 ** 실제 프로젝트에서 @Component가 필요한 비슷한 상황들을 직면하곤 한다. 하지만, 대부분의 상황에서 우리는 @Repository, @Service, @Controller 어노테이션을 사용하는게 좋다고 한다.\n\n\nSpring 빈 컨테이너 : 주기 관리 이렇게 @SpringBootApplication 와 그 안의 @Configuration, @EnableAutoConfiguration, @ComponentScan 에 대해 간단히 살펴보았다.\n그러면 생성된 Bean을 누가 등록해줄까? 스프링 빈 컨테이너다.\n 스프링 빈 컨테이너는 인스턴스의 생명주기를 관리한다.\n컨테이너의 종류는 ApplicationContext와 BeanFactory 2가지로 나누어지는데,\n둘의 차이점은 쉽게 말하면 ApplicationContext가 BeanFactory의 향상된 버전이라 한다.\n ApplicationContext 는 run() 메서드를 통해 Java configure를 읽어 bean을 등록한다. 싱글턴으로 객체 관리를 하기 때문에 한번만 실행된다.\n\n\n🔑​Spring Boot 구조의 이해 - 우리의 문제점은 여기에 ApplicationContext , 빈 관리 등 스프링 구조를 잘 몰랐기 때문에 발생한 문제였다. 기준이 되는 패키지를 생각하고 형상관리를 했어야 했다\u0026hellip;. 문제를 알았으니 이제 해결해야겠죠\n\n프로젝트를 하면서 컴퓨터 구조를 확실하게 알아야겠다는 생각을 많이 했다. 나 뿐만 아니라 우리 팀원 모두 그런 느낌을 받은건 우연이 아닌것 같다. 빠른 문제 해결을 위해선 기본적인 구조를 파악하고 체화해야 함을,, 오늘도 배운다- 까먹을 땐 이 블로그 포스트를 보며 다시 공부하자 😀😀\n\n출처:\n 기본기를 쌓는 정아마추어 코딩블로그 개발/일상_Mr.lee jhkang-dev님의 블로그 https://sieunlim.tistory.com/10  \n"
},
{
	"uri": "https://mand2.github.io/spring/user_register/5/",
	"title": "메이븐 빌드 및 배포란?",
	"tags": [],
	"description": "",
	"content": "메이븐은 프로젝트 객체 모델(Project Object Model)이라는 개념을 바탕으로 프로젝트 의존성 관리, 라이브러리 관리, 프로젝트 생명 주기 관리 기능 등을 제공하는 프로젝트 관리 도구이다. 또한 플러그인을 기반으로 소스 코드로부터 배포 가능한 산출물을 만들어 내는 빌드 기능 뿐만 아니라 레포팅 및 documentation 작성 기능 등을 제공한다.\n\n메이븐 자세히 알아보러 가기\npom.xml 태그들 자세히 알아보기\npom.xml 태그 조금 더 간결하게, 정리 더 잘 된 것\nmaven (메이븐 구조, 차이점, 플러그인, 라이프사이클, 의존성, pom.xml)\n자바 웹 어플리케이션 배포  SVN 으로 형상관리 하는 경우도 있다 (회사에서,,) git으로 형상관리 하기  배포 순서 :\n 각자 소스 코딩 후 형상관리 툴에 push 배포용 서버 컴퓨터에서 pull 받음 war 파일로 package tomcat에 배포  "
},
{
	"uri": "https://mand2.github.io/retro/20201101/",
	"title": "20201101:WTM 해커톤 후기",
	"tags": ["GDG", "Hackathon", "Diary"],
	"description": "",
	"content": "드디어 GDG 코리아에서 주최한 defFest의 WTM해커톤이 끝났다. 길고도 짧은 여정이 끝난 오늘(실제 블로그에 배포할 시간은 하루가 지나겠지만) 그 짧은 후기를 남겨본다.\n해커톤 지원 이유? 온라인 + 여성 개발자만 참여할 수 있는 해커톤이라 신청했다. 신청할 당시엔 온라인 해커톤이 내 상황에 딱 맞다고 생각했다. 첫 해커톤이라 부담이 덜 갈 수 있다고 판단했고, 일정도 2주나 주니까 일에 지장가지 않을 수 있다고 생각이 들었다. 체력적으로도 1박 2일 꼬박 밤을 새서 만드는 게 아니라(내가 아는 해커톤의 개념이 맞다면) 편할 것 같기도 했다.\n어떤 주제를 갖고 만들었나? 이번 WTM해커톤에서 제시한 주제는 다양했는데, 코로나블루를 이기는 방법/환경/공공api/금융 등등.. 크게 다섯가지 주제를 줬던 기억이 난다. 물론 제시한 주제가 다 싫으면 자율적으로 원하는 주제를 선택해도 되었다. 우리 팀의 주제는 개발자만을 위한 스터디/프로젝트 찾는 커뮤니티였다.\n이 주제를 선택한 이유에 이번 해커톤 초반부의 경험이 컸다. 짧게나마 이번 해커톤에서 느꼈던 ‘팀원 구하기’의 어려움이 컸어서 그런지, 우리 팀 4명 모두 이 주제로 해커톤을 하자고 빠르게 결론을 내었다.\n처음엔 자기소개 하고 바로 팀이 만들어져서 좋았는데, 프론트엔드 한 분이 빠지겠다고 하셔서 다른 한 분을 찾기가 굉장히 어려웠다. 이러다가 나 백엔드랑 프론트엔드 둘 다 해야하는 거 아니야? 하며 엄청 고민을 많이 했었다. 백엔드로만 해보고 싶었는데, 프론트랑 같이하면 하나에 제대로 집중할 수 없어져서 결과물이 원하는 만큼 나오지 않을 것 같은 예감이 들었기 때문이다. 다행히 해커톤 시작 전날이었나.. (2주 전인데 왜 기억이 안날까 ㅋㅋ) 프론트엔드 할 팀원을 구했다.\n언제나 그렇듯, 대학교 조별과제를 할 때도 그랬고 이번 해커톤도 그렇고 팀 짤 때 타이밍이 중요한 것 같았다. 처음에 이 조에 들어간 것도 먼저 같이 하자는 제의를 받아서 들어갔는데, 대학 수업시간에 교수님이 니들이 알아서 팀 짜~ 하시면 인싸 동기한테 빌붙었던 추억아닌 추억(\u0026hellip;)이 생각나 웃음이 났었다.\n팀명 3D의 유래? 누구한테 들었는지 기억은 안나는데 “개발자가 3D 직업중 하나라고요”라는 말은 아직도 기억에 남는다. 팀명을 정하는 시간에 장난스레 이 얘기를 꺼냈었는데 다른 분들의 만장일치로(!!) 팀명을 3D로 했다. 깃헙 계정이나 구글 계정도 3ddd가 들어간다 ㅋㅋㅋ 은근 아이디가 귀여움.\n개인적인 목표 이번 해커톤에서 얻고싶은 최소한의 목표는 ‘경험’이었다. 아니 회사도 다니면서 무슨 경험 타령이야? 할 수도 있다. 나는 이런 모임에 참여하는게 처음이었고 개발자들끼리 사이드 프로젝트를 하면 어떻게 일하는지, 다른 사람들은 어떻게 일하는지 그걸 관찰하고 내 것으로 만들고 싶었기 때문에 진부하지만 추상적인 말인 ‘경험’이라는 말로밖에 표현할 길이 없다.\n처음에 팀원들과 각자 생각하는 \u0026lsquo;이번 해커톤에서 얻고자 하는 목표\u0026rsquo;를 공유할 때, 프로젝트를 다 완성하지 못해도, 참여에 의의가 있어요~ 했는데 역시나 나란 사람의 성격은\u0026hellip;.🤥 완벽하게 만들려는 마음이 자라기 시작했다. 한번 개발하기 시작하면 내 새끼(ㅋㅋ) 같은 마음이 커서 그런지, 애착이 커져서 좀 더 완벽하게, 더 많은 기능을 만들고 싶다!! 하며 전날까지 수정하고 추가했었다.\n해커톤의 추억 메인 주제가 스터디/프로젝트 구하기라서 한 주제당 백엔드1+프론트엔드1로 짝을 정하고 개발을 했다. 나는 스터디와 회원가입관련 부분을 맡았고, 백엔드라서 일단 기본적인 DB구조나 API 설계, 문서제작을 했다.\n오늘 하루 목표 분량을 다 완성하면 노션링크를 공유했다.\n같이 일한 프론트엔드 분에게서 많은 걸 배웠는데, 이런게 애자일한 방식이구나~ 싶은 순간이 많았다. 내가 작성한 문서를 보고 피드백을 바로 주셔서 설계하기가 한결 편했었다. 오류가 나면 여기 오류가 나요! 해주시고, 뭔가 흐름이 이상하거나 헷갈리면 해결 될 때까지 슬랙으로 의견을 나누었다. 처음 기획부터 자유롭게 짤 수 있는 상황이라 수평적으로 의사소통을 할 수 있었다. 회사가 아니라 개인적으로 하는 사이드 프로젝트라 그런지 심적 부담도 덜했다 :)\n정말 신기했던게, 프론트엔드만 하시는 분이라 그런걸까 구현 속도가 정말 빠르셨다. 나는 회사에서 한 화면만 구현하는데 최소 4일은 걸리는데😨 (호불호가 확실한 취향이라서 프론트 업무를 할 때마다 스트레스 지수가 확 올라가고 효율성이 떨어진다)\n팀원분들도 다 좋으신 분들이라서 둥글게 얘기해주시고 문제가 생기면 내 일인양 같이 해결해 나가서 이런 태도를 배워야겠다 싶었다. 또, 판단력이 빠르신 분들이 계셔서 이런 부분은 꼭 노력을 해서라도 가져야 할 프로그래머의 자질인가보다, 느꼈다.\n맡은 부분이 점점 커져..? 사실 초반에는 스터디/프로젝트를 나눠서 구현하고, 시간이 남으면 회원가입관련/마이페이지도 나눠서 구현하기로 했는데 어쩌다 보니 회원가입 관련 부분과, 마이페이지 중 스터디 관련 파트를 추가로 맡게 되었다. 껄껄껄. 수정사항이 오면 하나만 고치면 되던게 두개, 세개를 같이 고쳐야 해서 아\u0026hellip;또 설계 거지같이 했네, 나💢💢 하고 나를 욕했다. 다행히 문제가 생기면 개발자들끼리라 그런지 일의 우선순위를 합의하기가 쉬웠다. 빠르게 피드백을 주고받을 수 있다는 게 아니었으면 이 정도로 구현할 수 있을까? 싶더라. 온라인의 장점👍\n문제는 온라인이다 보니까 각자 이해하는 포인트가 달라서 합의점을 찾는 데 걸리는 시간이 조금 더 걸린다는 점이다. 예를 들어 ‘지원자의 지원글 보기 / 지원자의 모집글 보기’ 가 다른 뜻인데 은근 헷갈려서 서로 뜻을 전달하는데 어려웠다. 비슷한 단어를 각자 지칭하는 말이 달라서\u0026hellip; 회사에서도 겪는 일이라 그런지 그냥 음~ 그럴수있지~ 하고 넘어갔었다. 오프라인에서 했어도 달랐을까? 아닐걸. 오프라인은 글이 남지않아서 더 오해가 생겼을 수도 있겠는데 싶더라.\n실수에는 책임이 \u0026hellip; 언제나 그렇듯 첫 삽, 즉 처음 설계할 때가 가장 힘들다. 잘못 설계하면 다시 뒤집어 엎고 만드는게 나을테니까\u0026hellip;! 그리고 그런 사고를 제가 쳤습니다. 동적 쿼리(검색)을 구현할 때 많은 시간이 투여되었는데, db 접근 방식을 jdbc-template으로 사용하자고 한 내 탓이 가장 크다. 최소한 mybatis2로만 가자고 했어도 이렇게 개고생하지 않았을 텐데.\n회사에선 jpa_queryDSL만 쓰다보니 mybatis / jdbc template의 구현속도 차이를 잊고 있었다.(변명\u0026hellip;😭) 같이 백엔드를 맡은 분께도 엄청난 똥투척을 한거였고, 중간에 mybatis로 바꾸자고 할까도 싶었는데 또 일을 크게 만드는 것 같아서 그냥 안고 가버렸다. 개인적인 일이 끝날 12월말 쯤, jpa로 바꿔서 구현해 봐야겠다. jpa설정하는게 매우 까다로운 걸로 알고있는데, 어떻게 할지 ㅎㅎㅎ 뭐 어떻게든 되겠지! 구글신이 날 도와줄 거야😇\n해커톤 데모데이 후기 거의 10팀이 발표를 하셨는데, 다들 아이디어가 톡톡 튀고, 실제로 서비스를 내놓는다면 ‘나부터 찾아서 쓰겠다!’ 라는 마음이 들 정도였다. 디자인적으로도 이쁘게 구현한 팀도 있었는데 이 짧은 기간동안 저런 걸 어떻게 생각해내지? 싶더라. 이번 프로젝트서 개인적으로 목표로 한 기능+@에, 기초적인 예외처리 기능들을 구현했는데, 우리팀 발표가 끝나고 진행자분께서 실서비스에서 내놓은 것처럼 예외처리가 잘 되어 있다고 하셔서 내심 뿌듯했다. 노력한 걸 잘 봐주신 것 같아서ㅎㅎ\n그 외. 아쉬운건 aws로 배포를 하지 않고 로컬로 시연했다는 점. 디비 구성에 많은 힘을 안들이려고 h2를 썼던 탓도 크고, aws 배포 세팅에 시간을 들일 시간에 더 많은 기능을 구현하고 싶어서 한 선택인데, 나름 아쉽긴 하다. gradle을 처음으로 실사용했는데 제 기능을 알지도 못하고 사용해서 아쉽다. 이동욱님의 스프링부트 책을 초반만 봐서 gradle설정까지는 어찌어찌 하겠는데, 그레이들 설정은 maven 보다 좀 더 세분화되었달까.. 알고 쓰면 좋을텐데, 급하게 필요한 부분만 서칭해서 붙여넣기를 했다. 스프링 시큐리티를 못 쓴 점. 이 기능을 넣었으면 좀 더 탄탄하게 만들었을 텐데\u0026hellip; 아직 뽀시래기라 그런지 스프링시큐리티 구현은 어려웠다. 빨리 공부를 해야할 텐데, 할 건 참 많다 :(\n\n해커톤에서 구현한 3D 백엔드부분 깃허브 : 바로가기\n"
},
{
	"uri": "https://mand2.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/diary/",
	"title": "Diary",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/gdg/",
	"title": "GDG",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/hackathon/",
	"title": "Hackathon",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/retro/",
	"title": "retro",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/",
	"title": "고라니의 개발일기🦌",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/others/activity-gdg-devfest-2020/",
	"title": "[활동] Devfest Korea 2020 10.16~",
	"tags": ["Session", "Activity", "Others"],
	"description": "",
	"content": "\n\n👆👆👆 위 배너를 클릭해서 Devfest 페이지로 이동하기 (배너출처: DevFest Korea 2020)\nGDG Korea(Google Developers Group Korea)에서 DevFest Korea 2020을 개최한다고 한다.\n크게 따로 등록이 필요하지 않은 세션과, 참가자들의 상호작용이 필요한 이벤트나 그룹토크, 액티비티 등을 액티비티로 나뉘어 진행한다.\n재밌어 보여서 액티비티 몇 개를 등록했다. 😊 추석연휴로 다시 코로나 확진자가 늘어날 것 같아서, 집에 콕 붙어있을 겸 다른 사람들은 어떻게 살고 있는지 알고 싶어서 겸사겸사 등록했다.\n"
},
{
	"uri": "https://mand2.github.io/tags/activity/",
	"title": "Activity",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/activity/",
	"title": "Activity",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/session/",
	"title": "Session",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/retro/20200921/",
	"title": "20200921: 카카오프로젝트100",
	"tags": ["Diary"],
	"description": "",
	"content": "시즌 1부터 알고있던 카카오 프로젝트 100(이하 카카오 플백 혹은 플백).\n알고는 있었지만 과연 내가 할 수 있을까? 고민하다 인원이 다 차서 참여하질 못했었다. 이번 시즌에도 똑같이 진행되나 싶었는데.. 용기를 내서 \u0026lsquo;자리 좀 늘려줄 수 있으세요..?\u0026rsquo; 라고 물어봐서 그동안 들어가고 싶었던 기술 아티클 읽기와 1일 1커밋 프로젝트에 참여하게 되었다 😎\n회사생활 존버하기2는 일상 인증이라서 쉽고 재밌을 것 같아서 지원했는데, 역시나 쉽게 인증 가능해서 그런지 사람들이 간단하게 올린 글도 재밌다. 월요일에는 다들 끄응끄응 앓는 소리가 들리는 듯 하고, 금/토요일은 날아갈 것 같은 목소리(이누야샤 퇴사짤의 목소리)로 말하는 것 같다.\n왜 챌린저스는 안하고 카카오 플백을 신청했나?\n플백은 내가 실패를 하면 그 금액만큼(100원/1일) 후원을 하는 거라 좋은 마음으로 참여하게 되었다. 물론 다시 받을 수 있는 금액에서 다시 후원해도 된다 굿굿~! 그리고 습관을 들이기 위해선 짧은 기간보다는 100일이라는 기간이 더 적당하다 생각해서 플백 시즌3에 참여하게 되었다.\n100%를 계속 달성하다 보니까 쪼오금 욕심이 난다. 주말에는 하기 싫은 마음이 많이 들기도 하는데, 100일 즈음이되면 어거지로 하는 것보다는 \u0026lsquo;아 해야되네~\u0026rsquo; 라는 마음이 들지. 기대되는 플백이다 👀\n"
},
{
	"uri": "https://mand2.github.io/categories/blog/",
	"title": "Blog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/others/start-hugo-1/",
	"title": "Hugo로 블로그 만들기 1",
	"tags": ["Hugo", "Others"],
	"description": "",
	"content": "hugo 설치 1 백업 일단 기존 github blog 글들을 백업해둔다\n2 전제조건 기존에 git bash 와 node.js (npm, yarn 모두) 설치 되어 있었다.\n3 Hugo 디렉토리 생성 원하는 디렉토리에 생성. 나는 D: 에 설치하는게 편하므로 D:\\Hugo 내부에 bin , Sites 디렉토리를 생성\n D:\n|\u0026ndash; Hugo\n|\u0026ndash;bin\n|\u0026ndash;Sites\n 4 Hugo 다운로드 최신 release 파일을 주소에서 다운로드. (🔊 당시 v.0.74.3이 최신버전이었음.)\n아까 생성한 D:\\Hugo\\bin 폴더에 해당 zip 파일 풀어준다.\n5 환경변수 설정 환경변수 설정 win 키+Q -\u0026gt; 시스템 환경 변수 편집 -\u0026gt; 고급 탭의 환경변수 -\u0026gt; 시스템 변수 의 Path 에 내가 정한 Hugo\\bin 디렉토리를 써준다\n Path = D:\\Hugo\\bin\n 6 설치확인   git bash 프롬프트에서 $ hugo version 으로 확인 해본다. 설치한 v.0.74.3이 나오면 OK👌\n  $ hugo help 를 치면 아래와 같은 결과가 나오면 OK👌\nhugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at http://gohugo.io/. 만약 안나온다? hugo.exe 파일이 있는 디렉토리 경로를 환경변수에 정확히 넣어준다.\n 💥그래도 안나와요!! 👉 forum에 들어가세요. If you’re still not getting the output, search the Hugo discussion forum to see if others have already figured out our problem. If not, add a note—in the “Support” category—and be sure to include your command and the output.\n   github 저장소 2개 만들기  컨텐츠와 소스 파일을 포함할 repo -\u0026gt; 컨텐츠 관련이라 mand2_blog 로 생성 (https://github.com/mand2/mand2_blog) 실제 blog에 보여질 github.io repo -\u0026gt; 나의 경우 mand2.github.io 로 생성  hugo site 만들기 1. 테마 설치하기 Hugo 가 설치되어있는 파일로 들어간다.\n $ cd d:\n$ cd Hugo $ hugo new site {{blog name}}\n 나는 mand2_blog 로 했으므로 $ hugo new site mand2_blog 로 했고 해당 디렉토리에서 $ git init 함.\n여러가지 테마를 봤지만, 그나마 내가 원하는 형식에 부합하는 테마가 hugo-theme-learn 이라 선택(aws 교육 받을 때 볼 수 있는 guide book 느낌).\n좀 더 안전하게 하기 위해, 해당 테마를 fork 하고 submodule로 가져온다.\n $ git submodule add {{git_theme_repo}} theme/{{원하는 테마 이름}}\n나의 경우: d:\\Hugo\\mand2_blog 에서 함. $ git submodule add https://github.com/mand2/hugo-theme-learn.git themes/learn\n 2 conf 설정값 변경 baseURL = \u0026#34;{{나의 깃허브 주소}}\u0026#34; languageCode = \u0026#34;en-us,ko-kr\u0026#34; # i18n 에 맞춰 작성. title = \u0026#34;GoRaNee\u0026#39;s dev-log\u0026#34; # 웹사이트제목 # Change the default theme to be use when building the site with Hugo theme = \u0026#34;learn\u0026#34; # 테마이름: themes 디렉토리 아래 저장한 테마명을 입력한다. # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 3 git 저장소로 등록   블로그 컨텐츠 git 저장소로 등록 : $ git remote add origin git@github.com:mand2/mand2_blog.git\n  실제 보여질 블로그 git 저장소 추가등록: $ git submodule add -b master git@github.com:{{깃 user name}}/{{깃 user name}}.github.io.git public\n   나는 RSA 등록을 해버렸\u0026hellip;기 때문에 접근을 https 로만 가능하다. $ git submodule add -b master https://github.com/mand2/mand2.github.io public\n  이렇게 함으로써 hugo 명령으로 public에 웹사이트를 만들 때, 만들어진 public 디렉토리는 다른 remote origin을 가질 것이다.  contents 만들기 1 내가 선택한 Hugo-theme-learn 은 기본 골격을 보여주므로, 커맨드라인을 잘 사용하자\n2 chapter 만들기\n$ hugo new -k chapter about/_index.md $ hugo new --kind chapter about/_index.md # 커맨드 위치는 d:\\Hug\\mand2_blog   -k 나 --kind 나 상관없다. 어떤 종류의 content 로 만들건지 미리 정해주는 커맨드임.\n👉 mand2_blog\\content 디렉토리 안에 about 이라는 폴더가 생성됨!!\n  확인사항: about\\_index.md 파일을 열고, chapter 가 true로 설정되었는지 확인해야 한다. 그 후, 해당 chapter의 기본적인 내용을 적어준다.\n  3 chapter 내부에 해당하는 page 만들기\n$ hugo new about\\first-content.md 4 실제 로컬에서 확인\n$ hugo server # 실제 배포될 때의 모습 $ hugo server -D # 실제 배포될 때의 모습 + draft도. page의 옵션이 draft = true 가 되면 server를 로컬로 돌렸을 때 draft 용 옵션 커맨드를 추가해야 보여진다.\n컨텐츠 업로드 (블로그에) 아래 단계가 귀찮으므로 auto commit 하기를 참고해도 좋다👍\n  C:\\Hugo\\blog로 이동\n  $ hugo -t 테마이름 명령을 통해 테마가 적용된 블로그 내용을 public에 생성한다.\n  $ cd public public 디렉토리로 이동하여\n  $ git add . 수정된 파일들을 index에 올린다.\n  $ git commit -m \u0026quot;커밋메세지\u0026quot; 변경 내용을 commit하고\n  $ git push origin master commit을 Integerous.github.io에 푸시\n  blog 저장소 에도 변경내용 push 하기\n $ cd blog $ git add . $ git commit -m \u0026quot;커밋메세지\u0026quot; $ git push origin master    "
},
{
	"uri": "https://mand2.github.io/tags/git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/show-git-contribute-in-3d/",
	"title": "Git 커밋 그래프(contribution graph)를 3D로 보는 방법",
	"tags": ["Git", "TIL"],
	"description": "",
	"content": "깃 커밋 그래프를 볼 때마다 색상으로만 판단하기 어려울 때가 있다. 사람마다 얼마나 자주, 얼만큼 많이 하느냐에 따라 색상의 농도가 달라지기 때문이다.\n실제로 얼마나 많이 했는지 그 크기를 같이 보고 싶었는데,\n언젠가의 기억에, \u0026lt;3D 그래프로 볼 수 있다~\u0026gt; 라는 내용의 포스팅을 봤었던 기억이 나서 찾아봤다.\n간단하게 정리하자면 구글 플러그인만 깔면 해결된다. github.com에서만 활성화 로 세팅하면 아래와 같이 나온다😎\n아래는 예시 이미지일뿐 내 깃헙 contributioin이 이랬으면 소원이 없겠다 ㅎ\n또 깃 커밋 관련 통계를 볼 수 있어서 플러그인을 잘 깔았다고 생각하게 한다👍\n  1년간 깃 커밋 총 합계 하루동안 제일 많이 커밋한 횟수 연속으로 커밋한 최대 일자 현재 기준: 연속 커밋 일자    자세한 정보 출처:\n깃헙 isometric-contributions. 해당 깃헙으로 들어가면 사용 방법이 나온다.\n"
},
{
	"uri": "https://mand2.github.io/tags/til/",
	"title": "TIL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/til/",
	"title": "TIL",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/retro/20200904/",
	"title": "20200904:하반기 읽을거리",
	"tags": ["Books", "Diary"],
	"description": "",
	"content": "일이 있어서 연차를 쓰고 해야 할 일을 다 마치고 난 뒤, 오랜만에 교보문고엘 갔다.\n서점에서 직접 책 사는 기분, 오랜만이다.(코로나라서 미리 바로드림으로 사놓고 빠르게 책만 찾아서 집에 갔다😎)\n회사에서 달마다 책을 살 수 있는데 그건 제외하고 내가 직접 산, 하반기에 읽을 책만 보면 아래와 같다.\n하반기라고 하기엔 벌써 두 달이나 지났지만, 아직 4개월 남았으니까 하반기 읽을거리라고 말해야지ㅎ.\n오늘도 어제와 같이 가을 햇살이 좋아서 사진도 색감있게 나왔네👍\n개발 책만 볼 건 아니고, 기분전환 겸 산 책까지 같이 기록으로 남겨야지.\n위의 두 권은 어떻게 살지 생각해 볼 겸 추천받은 책. 스프링부트와 AWS로 혼자 구현하는 웹 서비스는 유명하신 이동욱님의 첫 책이라서 샀다. 글을 읽히기 쉽게, 잘 쓰시는데 이 책은 더 잘 읽힐 것 같다. 마지막 알코올과 작가들은 요즘 내가 술을 못마시니까 대신 책으로라도🍹🍻 느껴보려고 샀다.\n얼마만에 다 읽을까\u0026hellip;? 궁금하다. 다 읽으면 혹은 좋은 영감이 떠오르면 블로그에 기록으로 남겨놔야지.\n"
},
{
	"uri": "https://mand2.github.io/tags/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/parsing/",
	"title": "parsing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/java-str-to-double/",
	"title": "자바 형변환 안전하게 하기",
	"tags": ["Java", "parsing", "TIL"],
	"description": "",
	"content": "형변환 할 때마다 참 고민이다.\nlong -\u0026gt; int 형변환은 쉽게 java.lang.Math.toIntExtract(long value)을 이용하면 된다지만, 그 외의 형변환을 할 때 \u0026lt;지금 내가 사용하는 게 정말 안전한 방법\u0026gt;인지 궁금해졌다. 어떻게 하면 더 안전하게 형변환 할 수 있을지 궁금해서 찾아본 안전하게 형변환하는 방법.\n다른 예도 많지만 String에서 double로 형변환 하는 방법을 들어보겠다. new Double(\u0026ldquo;1.23\u0026rdquo;) 와 같이 Double을 새로 만들어서 사용하는 건 Java 9부터 deprecated 되었다. 지양할 것.\n\r형변환을 도와주는 메서드 자바에서 형변환을 도와주는 메서드는 크게 세 가지로 볼 수 있다. :\n Double.parseDouble Double.valueOf DecimalFormat.parse : 엑셀의 셀서식과 같이, format 즉 형식을 세팅해준다.\n형식을 갖춘 값을 만들고 싶다면 쓰면 됨(예- $ 20,746.1746). 형식 지정 없이 그냥 double 형으로만 갖고오고 싶다면, Double.parseDouble or the Double.valueOf 을 사용하길 바람.  그런데 문제는, 이 세 방법 모두 Exception을 뱉어낸다.\n Double.parseDouble : NullPointerException, NumberFormatException Double.valueOf : NullPointerException, NumberFormatException DecimalFormat.parse : NullPointerException, ParseException  Exception 걱정없이 형변환 하기 1. Optional과 Guava 라이브러리의 Doubles 사용 Optional과 Guava 라이브러리의 Doubles 사용해서 exception을 회피한다. 참고 출처 에서는 String to int 형변환을 말했지만, 어쨌든 Guava에 Doubles 있으니까 답변을 참고로, double 형변환 메서드를 찾음.\nint foo = Optional.ofNullable(myString) .map(Doubles::tryParse) .orElse(0); 얘의 단점은 Optional이 비싸다는 것.\n그리고 double로 변경할 수 없을 땐 바로 null을 뱉어버린다.(Guava docs) 그래서 orElse로 기본값을 세팅해야 함.\n2. NumberUtils 사용 1의 방법도 좋지만 좀 더 null-safe한 다른 방법이 있나 찾아봤더니, NumberUtils라고 Util용 라이브러리를 사용하는 방법도 있다. org.apache.commons.lang3.math.NumberUtils의 메서드를 사용하면 된다.\n찾아보니 여러가지 형변환을 도와주는 Util이다!! 엄청난 듯.\n오늘의 예제는 String에서 double로 형변환 하는 거니까, 그 용례는 다음과 같다.\nNumberUtils.toDouble(null) = 0.0d NumberUtils.toDouble(\u0026#34;\u0026#34;) = 0.0d NumberUtils.toDouble(\u0026#34;1.5\u0026#34;) = 1.5d 심지어 원하는 형태로 변환이 안되면 기본값 0으로 세팅해서 보내준다.\n내가 원하는 기본값으로 세팅하고 싶을 땐?\n오버로딩된 메서드(toDouble(String str, double defaultValue))를 사용하면 된다.\nNumberUtils.toDouble(null, 1.1d) = 1.1d NumberUtils.toDouble(\u0026#34;\u0026#34;, 1.1d) = 1.1d NumberUtils.toDouble(\u0026#34;1.5\u0026#34;, 0.0d) = 1.5d 출처: apache docs\n역시 구글링은 해도해도 끝이 없다.. 어딘가 더 좋은 답안이 있을 것 같아서 구글링하는 시간이 줄지 않는다🤣\n"
},
{
	"uri": "https://mand2.github.io/tags/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/javascript/",
	"title": "Javascript",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/get-autoscaling-by-js/",
	"title": "자바스크립트로 AWS autoscaling group 정보 가져오기",
	"tags": ["Javascript", "AWS", "TIL"],
	"description": "",
	"content": "각 리전의 인스턴스를 컨트롤하는 람다를 유지보수하는 일을 맡았다. 일단 리전 하나에서 관리하는 것도 충분히 힘들지만, 여러 리전에서 관리를 하다니\u0026hellip; 같이 일하시는 분들이 대단해 보인다. 다들 기억력이 정말 좋으신듯 ㅠ_ㅠ 리전 하나당 관리하는 인스턴스 종류도 여러가지인데 꼼꼼하셔서 큰 사고없이 잘 유지중인 것 같다.\n아무튼 각설하고, 오늘의 주제는 AWS autoScalingGroup 정보 가져오기 by. javascript.\nAWS에서는 SDK라고 해서 aws 관련한 모든 것에 접근할 수 있는 라이브러리를 제공한다. 평소에는 java-sdk로 aws에 접근하지만, 이번에는 람다용으로 개발할 거라서 javascript-sdk 용으로 설명한다. (특이한 점: 각 언어별로 제공되는 파라미터 값이나 입력값이 다름. 메서드도 다르다!)\n참고한 부분은 역시나 AWS docs의 AutoScaling 관련 부분임. AWS docs\n호출방식  aws-sdk를 가져온다. aws.autoScaling 객체 생성. params에 원하는 정보를 입력해준다. (filtering)\nAutoScalingGroupNames / MaxRecords / NextToken은 필수값은 아님. autoScaling.describeAutoScalingGroups 호출!   \n예제 리턴하는 방식은 아래와 같다.\n받아온 data로 autoScaling을 어떻게 조작할지 개발하면 된다(이제 시작이라는 뜻ㅎ). \n\n궁금했던 점 Q. AutoScalingGroups의 DesiredCapacity와 instances의 차이?\ndesiredCapacity : scale-in / out이 발생하지 않으면 지속될 인스턴스 개수.\ninstances : 해당 오토스케일링 그룹에서 띄운 instance의 세부정보.\n출처: 스택오버플로우\n"
},
{
	"uri": "https://mand2.github.io/retro/20200902/",
	"title": "20200902",
	"tags": ["Diary"],
	"description": "",
	"content": "오늘은 날씨도 우중충하니까 우울한 이야기를 해야겠다.\n월급의 20%를 자기계발로 써야한다는 말을 들어서, 나는 자기계발을 열심히 하는 개발자인가, 생각해보았다.\n반은 맞고 반은 틀리다. 젠장\n\r\r자유 시간에 나는 무엇을 했는지 살펴보면.. \r\r일단 책과 강의는 열심히 사는 편이다: 돈을 쓴다 -\u0026gt; 열심히 한다?\n틀어놓고 자거나, 책을 10~20분, 혹은 아예 안 볼때도 많다: 배가 불렀다 -\u0026gt; 열심히 안한다\n업무에 필요하다며 기기들을 산다 -\u0026gt; 개발자 뽕이 차오른다🍷🍷🍷 -\u0026gt; 뽕만 차오르고, 통장은 텅장이 되어버린다.\n\r 결국 입으로만 \u0026lsquo;아~ 공부해야지\u0026rsquo; 해놓고 아무 것도 하지 않았다. 행동력으로 보여줘야 할 것을..쯧쯧 끝없이 채찍질해야 하건만 지르고 나면 만족감이 날 지배했달까\u0026hellip; 투자 대비 아웃풋이 정말 극악인 인간이다. 투자한 것 만큼은 성장해야 하는데. 이 강박 때문에 더 급해진 것 같다. 나는 20만큼 성장하길 바라고 투자를 하는데, 결과는 5면 감사할 정도ㅋ 이게 남는 장사인가. 내가 원하는 개발자란 빠르게 개발 할 거 개발하고, 남은 시간에 더 나은 서비스 제공을 위해서 요즘 뭐가 좋은지 서치도 해보고 공부도 해보는 삶인데, 현재 저 빠르게 개발한다에서 막힌다. 깊이가 없으니 문제 해결에 애를 먹는 것 같다. 아, 그리고 어떻게 코드를 짰는지 분석하는데 시간이 엄~청 걸린다. 내가 쓰는 것들만 쓰다보니, 타인이 작성한 코드는 복잡해 보여서 지레 겁먹는 것도 이유일 거다.\n차근차근히 공부하면 되는데 요행을 바라고 있으니 마음이 급해진 것 같달까. 다시 차분히 노트북 앞에 앉아서 공부해야지. 스터디 하나 만들면 참 좋을텐데 현실은 코로나로 인해 개인적으로 공부해야 될 것 같다. 재미가 없는 삶.. 다이나믹 코리아!! 다이나믹 고라니!!🍺를 외치던 나였는데. 요즘 재택이라 집에서만 갇혀있어서 코로나 블루가 온 건지😅 아무튼 이번달 치 푸념은 다 했다. 9월도 열심히 하자.\n"
},
{
	"uri": "https://mand2.github.io/tags/bash/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/blog-auto-commit/",
	"title": "블로그 커밋 메세지 만들고 자동 배포 하기",
	"tags": ["TIL", "Bash"],
	"description": "",
	"content": "정말 짧은 기간이긴 하지만, Hugo 테마로 블로그를 구축하다 보니 git commit 하기가 귀찮아졌다.\n회사에서는 웬만하면 git 커맨드로 직접 push 하는 스타일이긴 한데, 이렇게 자주 수정하고 push를 여러 단계에 걸쳐서 하는 건 아니라서💦 더 귀찮아진 느낌이다.\n결국 배포 자동화 하는 쉘스크립트를 작성하였다.\n기본적인 뼈대는 한정수님 블로그의 README.md에서 참고하였다. 그냥 커밋 메세지를 똑같이 auto commit!으로 하기엔 넘 멋없어 보여서 커밋 메세지를 따로 입력받아 처리하였다. 쉘스크립트를 호출하면서 커밋메세지를 받아올 수도 있지만, 그렇게 하면 순간적으로 오타가 날 수도 있고 다른 내용을 작성하고 싶기도 해서 관리하기 쉽게 커밋 메세지용 파일을 따로 만들어 두었다.\n전제   public, blog 모두 현재 세팅된 브랜치에 push 한다.\npublic이 master 브랜치, blog가 dev브랜치에 있다면 각각 원격 브랜치로 push.\n  로컬, 원격 저장소 모두 연결된 상태다. (연결되지 않았다면 --set-upstream 커맨드 날릴 것.)\n$ git branch --set-uptream-to=origin/[remote 브랜치명] [로컬 브랜치명]   사용하는 테마가 하나다. (여러가지 있다면 프로젝트 빌드 할 때 hugo -t [테마명]으로 세팅.)\n  커밋 메세지는 파일에 각각 저장해둔다.\n나의 경우, blog 관련 커밋메세지를 /d/Hugo/mand2_blog/msg/blog.md 파일 내부에 작성하였다.\n이 파일의 경로를 쉘스크립트 초반 msg_blog_files 변수에 넣는다.\n  쉘스크립트의 위치는 블로그(hugo blog) 루트에 위치한다.\n  쉘 스크립트 deploy.sh 작성  실행 가능하게 만들기 chmod +x deploy.sh 커맨드를 날려서 deploy.sh 파일을 실행 할 수 있도록 변경한다.\n작성 후 실행 .\\deploy.sh 로 실행한다. 아래는 결과 화면.\\\n blog 커밋 내역  public 커밋 내역   "
},
{
	"uri": "https://mand2.github.io/retro/20200830/",
	"title": "20200830: 블로그 이사",
	"tags": ["Diary", "blog"],
	"description": "",
	"content": "드디어 미루고 미루던 블로그 대공사를 1차 완료하였다.\n저번 블로그는 지킬 jekyll로 했는데, 커스터마이징을 이상하게 해서 글씨 크기가 뒤죽박죽이고 뭔가 색상도 이상했다.(내 디자인 실력이 이상하단 뜻)\n그래서 그런지 더 블로그에 글 쓰기도 싫었다. 회사에서 일하며 알게된 건 두 가지 방식으로 저장하는데,\n 노션 가끔 깃 저장소  정보가 한 곳에 모이지 않아서 후에 확인하기가 어려웠다. (이 문제는 노션으로 다 합쳐서 해결된 상태임.) 웬만하면 업무용은 노션에, (업무와 전혀 관련성이 없는) 사람이 봐도 괜찮을 만한 내용은 깃으로 업로드하는 편이다.\n어쩌다보니 점점 업무는 많아지는데(일을 빨리 해결 못함) 예전에 헤매었던 곳에서 또 방황하고 있으니.. 업무효율성 극악. 아무튼 각설하고, 여러가지 원인으로 인해 블로그를 개편하였다.😊\nHugo로 할까, Hexo로 할까 고민했었는데 go를 한번 써보고 싶기도 하고 왠지 Hugo가 더 끌려서 선택했다. 두 종류 모두 템플릿이 많고, 실제 서비스로 push하기 전에 로컬에서 직접 확인할 수 있다는 장점이 있다.\n어차피 코로나가 극성이기도 하고 몸이 안좋은 상태라, 이번 주말에 쭉 집중해서 하기 좋은 상황이었다. 덕분에 블로그를 한꺼번에 옮기고 커스터마이징을 완료했다. 유후~ 신기했던게, 우리 회사 블로그 중 하나가 지금 내 블로그 템플릿으로 만든거더라💦 어쩐지 뭔가 익숙하다 했어.\n아무튼, 지금 내가 세팅한 게 너무도 깔끔해서 뿌듯하다. 그래 커스터마이징이 답이었어!! 티스토리로 갈까 고민했던 나 자신..반성해라. 만들면서 기본적인 방법과 커스터마이징 방법을 정리하려고 했으나, 너무나도 광범위하여 조금씩 정리해야겠다. 껄껄\n아무튼 속 시원하다~!\n"
},
{
	"uri": "https://mand2.github.io/tags/blog/",
	"title": "blog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/spring/rest-api/",
	"title": "Rest Api",
	"tags": [],
	"description": "",
	"content": "\r\rMethods @Get, @Post, Delete, @Put\r\r\r\r\r@PutMapping 사용 시 415 오류 해결방법\r\r\r\r\rstatustext parsererror 해결방법\r\r\r\r\rREST API Client에서 호출가능한 Library\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/others/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": "\r\r[책] 오브젝트 (1)\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/spring/spring-boot/",
	"title": "Spring Boot",
	"tags": [],
	"description": "",
	"content": "\r\rspring.jpa.open-in-view 로그 오류 해결하기\r\r\r\r\rquerydsl 설정하기\r\r\r\r\rmaven 빌드 오류\r\r\r\r\r@SpringBootApplication\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/categories/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/spring/user_register/",
	"title": "회원가입",
	"tags": [],
	"description": "",
	"content": "\r\rsingle-page 회원관리 폼 만들기\r\r\r\r\rSpring handler 인터셉터\r\r\r\r\rSpring 웹상에서 메일 보내보기\r\r\r\r\r회원가입 시 이메일 인증처리\r\r\r\r\r메이븐 빌드 및 배포란?\r\r\r\r\r"
},
{
	"uri": "https://mand2.github.io/tags/rest-api/",
	"title": "Rest-API",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/rest-api/",
	"title": "Rest-API",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/build-plugs-of-maven/",
	"title": "Maven pom.xml 빌드 플러그인 세팅하기",
	"tags": ["TIL", "Spring"],
	"description": "",
	"content": "작성한 코드를 라이브러리 형식으로 만들기 위해 .jar 파일로 만들었다. 내가 세팅한 버전 등에 맞게 내보내기 위해 + 설정한 dependency 까지 보내주기 위하여 설정하였다.\n스펙\n intellij JDK 1.8 maven 4.0.0  그전에 앞서, apache maven project 사이트에서 말하는 최소 사양은 다음과 같다.\n Maven 3.0 이상 JDK 1.7 이상  Q. pom.xml에 사용한 dependency를 어떻게 내보내야 하는가? 두 가지 버전이 있다.\n  maven-assembly-plugin 사용:\n내부에 전 dependency를 저장하여 보내주기 때문에 용량이 크다.\n  maven-jar-plugin + maven-dependency-plugin 함께 사용:\nmanifest.mf 파일에 라이브러리의 상대경로를 저장해서 불러오도록 한다.\n   manifest 파일이란 ? 바로가기\npom 파일에 대해 더 설명을 원할 때 ? 바로가기\n 용량문제 + 1의 경우 conflict 문제가 있다는 말이 있어 2를 선택함. 출처\n실제로 2로 할 때의 용량이 26KB 인데 반해 1의 경우 4600KB 정도로 용량차이가 큼.\n\n버전 1 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;descriptorRefs\u0026gt; \u0026lt;descriptorRef\u0026gt;jar-with-dependencies\u0026lt;/descriptorRef\u0026gt; \u0026lt;/descriptorRefs\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; \u0026lt;!-- this is used for inheritance merges --\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;!-- bind to the packaging phase --\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \n버전 2 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-jar-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.2.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;archive\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;addClasspath\u0026gt;true\u0026lt;/addClasspath\u0026gt; \u0026lt;packageName\u0026gt;com.demo.sample\u0026lt;/packageName\u0026gt; \u0026lt;classpathPrefix\u0026gt;lib/\u0026lt;/classpathPrefix\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;/archive\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-dependency-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;copy-dependencies\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;copy-dependencies\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;outputDirectory\u0026gt;${project.build.directory}/lib\u0026lt;/outputDirectory\u0026gt; \u0026lt;overWriteReleases\u0026gt;false\u0026lt;/overWriteReleases\u0026gt; \u0026lt;overWriteSnapshots\u0026gt;false\u0026lt;/overWriteSnapshots\u0026gt; \u0026lt;overWriteIfNewer\u0026gt;true\u0026lt;/overWriteIfNewer\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 필요한 부분들\n packageName mainClass : main() 가 있으면 포함해야 함. classpathPrefix  \nQ. java version setting은? 버전 세팅에도 두가지 방법이 있다.\n1. build 할 때 세팅하는 방법 \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;${java.version}\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;${java.version}\u0026lt;/target\u0026gt; \u0026lt;encoding\u0026gt;utf-8\u0026lt;/encoding\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \n2. 처음부터 세팅 \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;1.8\u0026lt;/java.version\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;/properties\u0026gt; \nQ. jar 파일 이름 설정가능한지? 가능하다. 아래와 같이 pom.xml 에서 설정가능.\n\u0026lt;groupId\u0026gt;com.demo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;demo-sample\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;sample\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;DEMO Java Sample project for Spring Boot\u0026lt;/description\u0026gt; [...] \u0026lt;build\u0026gt; \u0026lt;finalName\u0026gt;${project.artifactId}-${project.version}\u0026lt;/finalName\u0026gt; \u0026lt;/build\u0026gt;  라이브러리 명( == jar 파일명)\n\u0026lt;finalName\u0026gt; 에 정해진 대로 : demo-sample-1.0.0.jar 라이브러리 내부의 패키지명(class 파일을 갖고있는 패키지임)\nmaven-jar-plugin 의 \u0026lt;packageName\u0026gt; 을 따름 : com.demo.sample 라이브러리 내부의 META-INF maven.{groupId}.{artifactId} 로 나옴  \n마지막 intellij 기준으로 maven - lifecycle - clean 후 package 로 하면 target 폴더에 원하는 .jar 가 만들어진다. 이 파일은 라이브러리형식으로 되었기 때문에 다른 프로젝트에서 쓸 수 있다-!\n\n번외 : Apache Maven Archiver 자세한 설명보러가기 👉 docs\n\u0026lt;archive\u0026gt; \u0026lt;addMavenDescriptor/\u0026gt; \u0026lt;compress/\u0026gt; \u0026lt;forced/\u0026gt; \u0026lt;index/\u0026gt; \u0026lt;pomPropertiesFile/\u0026gt; \u0026lt;manifestFile/\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;addClasspath/\u0026gt; \u0026lt;addDefaultEntries/\u0026gt; \u0026lt;addDefaultImplementationEntries/\u0026gt; \u0026lt;addDefaultSpecificationEntries/\u0026gt; \u0026lt;addBuildEnvironmentEntries/\u0026gt; \u0026lt;addExtensions/\u0026gt; \u0026lt;classpathLayoutType/\u0026gt; \u0026lt;classpathPrefix/\u0026gt; \u0026lt;customClasspathLayout/\u0026gt; \u0026lt;mainClass/\u0026gt; \u0026lt;packageName/\u0026gt; \u0026lt;useUniqueVersions/\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;manifestEntries\u0026gt; \u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; \u0026lt;/manifestEntries\u0026gt; \u0026lt;manifestSections\u0026gt; \u0026lt;manifestSection\u0026gt; \u0026lt;name/\u0026gt; \u0026lt;manifestEntries\u0026gt; \u0026lt;key\u0026gt;value\u0026lt;/key\u0026gt; \u0026lt;/manifestEntries\u0026gt; \u0026lt;manifestSection/\u0026gt; \u0026lt;/manifestSections\u0026gt; \u0026lt;/archive\u0026gt; \n 더 자세한 내용은 https://maven.apache.org/plugins/maven-jar-plugin/\n"
},
{
	"uri": "https://mand2.github.io/tags/db/",
	"title": "DB",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/til/definition-db-index/",
	"title": "DB index의 정의",
	"tags": ["TIL", "DB"],
	"description": "",
	"content": "What is index? USAGE 1 : Support for fast Lookup\nAn index is any data structure that improves the performance of lookup. There are many different data structures used for this purpose. There are complex design trade-offs involving lookup performance, index size, and index-update performance. Many index designs exhibit logarithmic (O(log(N)) lookup performance and in some applications it is possible to achieve flat (O(1)) performance.\nUSAGE 2 : Policing the database constraints (I assumed it as a DB table guideline)\nIndexes are used to police database constraints, such as UNIQUE, EXCLUSION, PRIMARY KEY and FOREIGN KEY.\n An index may be declared as UNIQUE, which creates an implicit constraint on the underlying table. Database systems usually implicitly create an index on a set of columns declared PRIMARY KEY, and some are capable of using an already-existing index to police this constraint. Many database systems require that both referencing and referenced sets of columns in a FOREIGN KEY constraint are indexed, thus improving performance of inserts, updates and deletes to the tables participating in the constraint.  \n1 Applications and limitations -index가 없으면 full scan 함\n-index가 있다면 쉽게 B-tree 구조로 되어 스캔(시간단축된다)\n-like 를 쓸 때에는 index가 있더라도 full scan 될 수 있음\n\rIndexes are useful for many applications but come with some limitations. Consider the following SQL statement: SELECT first_name FROM people WHERE last_name = 'Smith';. To process this statement without an index the database software must look at the last_name column on every row in the table (this is known as a full table scan). With an index the database simply follows the B-tree data structure until the Smith entry has been found; this is much less computationally expensive than a full table scan.\nConsider this SQL statement: SELECT email_address FROM customers WHERE email_address LIKE '%@wikipedia.org';. This query would yield an email address for every customer whose email address ends with \u0026ldquo;@wikipedia.org\u0026rdquo;, but even if the email_address column has been indexed the database must perform a full index scan. This is because the index is built with the assumption that words go from left to right. With a wildcard at the beginning of the search-term, the database software is unable to use the underlying B-tree data structure (in other words, the WHERE-clause is not sargable). This problem can be solved through the addition of another index created on reverse(email_address) and a SQL query like this: SELECT email_address FROM customers WHERE reverse(email_address) LIKE reverse('%@wikipedia.org');. This puts the wild-card at the right-most part of the query (now gro.aidepikiw@%), which the index on reverse(email_address) can satisfy.\nWhen the wildcard characters are used on both sides of the search word as %wikipedia.org%, the index available on this field is not used. Rather only a sequential search is performed, which takes O(N) time.\n\n2 Types of indexes 2-1 Bitmap index Main article: Bitmap index\nA bitmap index is a special kind of indexing that stores the bulk of its data as bit arrays (bitmaps) and answers most queries by performing bitwise logical operations on these bitmaps. The most commonly used indexes, such as B+ trees, are most efficient if the values they index do not repeat or repeat a small number of times. In contrast, the bitmap index is designed for cases where the values of a variable repeat very frequently. For example, the sex field in a customer database usually contains at most three distinct values: male, female or unknown (not recorded). For such variables, the bitmap index can have a significant performance advantage over the commonly used trees.\n\n3 Others to see  search engine indexing URL InnoDB URL more information about index URL  \n quotes from wiki\n"
},
{
	"uri": "https://mand2.github.io/tags/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/excel/",
	"title": "Excel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/table/",
	"title": "Table",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/sort/",
	"title": "Sort",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/interviews/",
	"title": "Interviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/interviews/",
	"title": "Interviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/others/interviews/",
	"title": "면접질문 정리",
	"tags": ["Interviews", "Others"],
	"description": "",
	"content": "신입 개발자로서 면접을 보며 받았던 면접질문들을 기억이 나는 대로 복기하여 써보려 한다. 일단 기억력이 좋지 않아서 정확한 질문은 기억이 나지 않지만, 이런 종류 or 느낌의 면접 질문을 받았구나~ 라고 보면 좋을 것 같다. 편안하게 커피 한 잔 하며 보시길 추천! ☕\n\n🐸 기본 인성 면접(비전공자 기준) 일단 본인이 비전공자이며, 직장경험이 없잖아 있는(없다고 하기도 그렇고 있다고 하기도 뭐한 수준) 것을 먼저 밝히는 바이다. 모든 곳에서 공통적으로 받은 질문은\n 왜 이 길을 선택했나요? 꼭 개발자여야만 하는 이유는? 경력이 상당히 특이하신데, 어떻게 생각하는지? 학원에서 개발 6개월 배운 거 맞나요? 6개월 간 공부하며 느낀 점 / 어려웠던 점 / 힘들었던 점 비개발 부문으로도 경력을 살릴 수 있는데 왜 굳이? 만득씨가 생각하기에 본인이 타 지원자보다 더 내세울 수 있는 부분? 학원 사람들에 비해서 본인이 어느정도 위치에 속한다 생각하나? (실력 / 노력으로 나눠서 대답) 요즘 관심있는 분야는? 공부중인가? 본인이 생각하기에 자신의 장점 / 단점이 개발직에 적합하다 생각하나?  복기해보니 정말 기본적인 수준에서 이 사람이 **개발직에 적합한지 아닌지 판별하는 수준**으로 끝난다. 사실 자소서 쓰면서 다 정리하는 거니까 준비하는 데에 그렇게 어렵지 않을 것이다. 비전공자가 전공자에 비해 잘하는 건 STORYTELLING이니까 잘 할 듯 !\r🔑 기술 면접 -1  이 포트폴리오 본인이 직접 작성한건가? 학원에서 만들어 준 것 아닌가? 깃허브 관리에 대해 질문(깃허브 자주 사용하는지 등등..) 이 프로젝트 간단 설명해봐라 기술스택 질문1: RDS 무엇 사용했는지? 등.. 기술스택 질문2: WAS 와 TOMCAT의 차이? / WAS와 웹서버의 차이? 기술스택 질문3: Spring과 Springboot의 차이점 설명 -\u0026gt; 꼬리질문 기술스택 질문4: node.js 사용한 이유? 기술스택 질문5: Oracle과 Mysql 모두 사용해봤는데 사용하면서 느낀 둘의 차이점 / 특징은? 스프링만 사용했나? 다른 건? 이 프로젝트를 했을 때 가장 어려웠던 점 설명 -\u0026gt; 꼬리질문 반대로 가장 재미있었던 경험은? -\u0026gt; 관련 기술로 또 꼬리질문 이 프로젝트에서 본인이 기여한 부분은? 수치화 한다면 어느 정도라 생각? 본인이 했다고 한 부분을 혼자서 다 했다는 건가? -\u0026gt; 꼬리질문 백엔드(server) 쪽만 구현한건가? 프론트는 해 본 경험이 없나? 배포를 어떤 방식으로 했나? 팀장이었나? 왜 이리 한 게 많은가?  기술면접 -1은 인성과 기술면접이 가미된 느낌이라 하나로 묶어서 올린다. 프로젝트를 열심히 하고, 정리만 잘 해놔도 기술면접-1을 준비할 때 큰 어려움이 없을 것이다.\r🔑 기술 면접 -2  REST 구조를 썼던데 왜 선택했나? REST 구조 설명 / REST와 RESTFUL의 차이가 있다면 설명해봐라 메서드 오버라이딩/오버로딩의 차이점? 쓰는 이유? 어노테이션의 뜻 Bean을 만드는 어노테이션 생각나는 대로 다 말해봐라 / 비슷한 질문 있음. @SecondaryTable 이게 뭔가? 설명해봐라 (위의 질문과 연결) Boot를 쓸 때 사용한 어노테이션 외에도 알아본 어노테이션이 있는가? 있다면 설명 서브 쿼리의 정의/종류/차이점? SQL 실행순서 설명해봐라 Mysql로 댓글을 만든다면 어떤 방식으로 만들 것인가? SQL문 작성해봐라 .ready() vs .onload() 특징 및 차이 jQuery란 무엇인가 MVC 패턴 JPA 썼던데 소감? 왜 JPA를 쓰는지 설명해봐라 (특징위주로 답변) EL JSTL JSP 정의 / 차이 자바 버전 관련 질문 DAO, DTO, Entity Class의 차이 maven vs gradle rest 메서드 질문: template 사용한 이유와 왜 이 메서드를 썼는지? inner join / outer join / full outer join 특징 설명 DI가 뭔지 아는가? 무엇인가? Spring Aop가 무엇인가? 관련해서 사용해본 경험이 있는지? 다른 팀원이 구현한 부분 질문 / 이 상황에 대해 어떻게 할 것인지?  생각나는 대로 적었는데 내가 사용한 기술 / 포폴에 서술한 것들은 무조건 물어보는 것 같고 기본적은 CS는 단골질문인 것 같다. 부랴부랴 면접준비하며 머리 속에 정리하는 것보다 자신만의 언어로 재정의하여 공부하는 게 낫다. 설명하기도 편하고... 물론 지금 또 까먹기 시작했다 ㅠ 사실 이 글을 쓰는 이유 중의 하나는 이런 기본적인 CS도 까먹지 말고!!! 다시 보면서 정리하고 내재화 할 때까지 끊임없이 보자는 뜻에서 작성했다. 말이 엄청 기네, 짧게 말하자면 나 자신을 위한 포스팅이었다,, 구글링을 잘 하다보면 각자 정리한 것들이 많은데 눈팅만 하고 면접을 보러가면 바로 발려버린다. 가장 기본적이며 개념을 묻는 질문은 이 질문 리스트에서 제외시켰는데 구글링만 해도 다 아니까,, 이 글을 읽는 사람이 자신의 상황에 잘 대입하여 준비를 하면 되지 않을까 싶어 공유한다.\n\n"
},
{
	"uri": "https://mand2.github.io/til/collection-framework/",
	"title": "컬렉션 프레임워크의 정의와 stream 사용법 간단 정리",
	"tags": ["TIL", "Java"],
	"description": "",
	"content": "최근, 알고리즘 문제를 풀 때 (링크) 다른 사람의 문제풀이에서 stream()을 사용한 풀이가 있었다. 그동안 stackOverFlow에서나, 다른 레퍼런스 문서 등에서 가끔 보던 형식이었다. 그 땐 이 형식이 람다식으로 만들어진 줄도 몰랐다. 내 기억상 음,, 이건 다른 언어에서 쓰는건가? 하고 넘겼던 듯. 이번 문제풀이를 통해 컬렉션과 람다식에 대해 꼼꼼히 배울 수 있는 계기가 되었다고 생각하고, 간단히 정리를 해 보려고 한다. 아래는 내가 보았던 식이다.\nreturn list.stream().mapToInt(i-\u0026gt;i.intValue()).toArray(); 이 뜻은\n list를 스트림으로 만들고, int 형식으로 변환 후 다시 배열로 바로 반환  한다는 뜻이다.\n여기서 궁금한 순서가\n stream()은 뭐지? stream은 언제부터 사용 가능했나? (== 도입시기) 사용법 / 주의사항은?  \n 1-1 stream 이란? 자바 8부터 추가된 기능으로 \u0026ldquo;컬렉션, 배열등의 저장 요소를 하나씩 참조하며 함수형 인터페이스(람다식)를 적용하며 반복적으로 처리할 수 있도록 해주는 기능\u0026ldquo;이다. java api문서를 보면 java.util.Collection.stream() 에서 찾을 수 있다. 이 정의에서 다시 \u0026lsquo;컬렉션\u0026rsquo;이란 무엇일까 궁금해진다.\n\n1-2 Collection 이란? Interface로 분리되며, Iterable을 상속한다. 컬렉션 프레임워크에 속하는 인터페이스를 구현한 클래스를 컬렉션 클래스(collection class)라고 한다.\nSince: 1.2\n**See Also: ** Set, List, Map, SortedSet, SortedMap, HashSet, TreeSet, ArrayList, LinkedList, Vector, Collections, Arrays, AbstractCollection\n구조 간단 정리 출처 링크로 들어가면 메서드까지 잘 정리되어 있음. 필요할 때 보자-! 다른 링크는 학원에서 처음 자바를 배울 때 애용했던 TCP school 페이지임. 이 페이지도 잘 정리되어있다.\n자세히 보면 collection 자체가 시작된 건 java 2 부터라니,, 의외다. 1.8 기준으로 보면 Support for Lambda Expressions, Streams, and Aggregate Operations\r 을 지원하기 시작했다고 뜬다.\n여기서 Aggregate Operation 이란게 뭘까 찾아보았는데 지금 포스팅 주제와 달라서 따로 공부하고 포스팅해야 할 필요성을 느꼈다. 뭔가 방대해보임. aggregation(집약관계, 연관)과 composition(포함관계, 복합연관)의 개념을 다 알아야 한다. 지금은 검색하고 바로 포스팅한 거라서 확실치는 않다.이 단락은 100% 신뢰하지 말 것!\n링크1 / 링크2\n\n1-3 그러면 Collection Framework는? 다수의 데이터를 쉽고 효과적으로 처리할 수 있는 표준화된 방법을 제공하는 클래스의 집합이며, 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현해 놓은 것이다.\n정리하자면, Collection Framework에는 크게 3가지 인터페이스가 있다.\n List 인터페이스 \u0026gt; Collection 상속 Set 인터페이스 \u0026gt; Collection 상속 Map 인터페이스 구조상 차이로 인해 Collection 상속X 바로 java.util.Map으로 시작.  \n2 stream 도입은 언제라고? 1-2에서 설명했듯, stream은 람다식과 함께 java 8 부터 사용할 수 있다.\n\n2-2 stream은 왜 사용하는 걸까 불필요한 코딩(for, if 문법)을 걷어낼 수 있고 직관적이기 때문에 가독성이 좋아진다. 주로 Collection 과 Array에서 사용된다고 함.\nstream 사용 전 for(int i = 0 ; i \u0026lt; list.size() ; i++){ answer[i] = list.get(i); } stream 사용 return list.stream().mapToInt(i -\u0026gt; i.intValue()).toArray(); 사용 예시를 보면 알 수 있듯이 계속해서 .으로 쭉- 이어나갈 수 있다. 즉 파이프라인 구조를 쓴다.\n\nstream을 사용하는 다른 이유로는 성능/공짜점심이 있다고 하는데, HAMA 님은 성능만을 이유로 stream을 쓰기엔 애매하다 라는 평을 하셨다. 더 찾아봐야 할 듯.\n\n3 스트림 사용법과 주의할 사항? 스트림의 기본 구조는 스트림 생성 -\u0026gt; 중개연산 -\u0026gt; 최종연산 순으로 이루어진다.\nCollection 같은 객체 집합.스트림생성().중개연산().최종연산();\r스트림의 특징은 한번 닫으면 다시 쓸 수 없다는 점이 있다. 여기서 파생되는 문제가, (1)재사용을 못할 수도 있지만 (2)스트림을 무한으로 생성할 수도 있다는 문제가 있다. 닫히지 않는 문제!! 또한 파이프라인 구조로 인해 중개연산 선언순서가 달라지면 다른 값이 나온다는 점도 주의해야 한다.\n\n 출처 stream 정의와 사용법 관련 1 : futurecreator 님 블로그\nstream 정의와 사용법 관련 2: 정프로 님 블로그 : API 내용을 간단하게 훑어준다.\nstream 주의사항 관련: HAMA 님 블로그\n\n"
},
{
	"uri": "https://mand2.github.io/others/books/objects_1/",
	"title": "[책] 오브젝트 (1)",
	"tags": ["Books", "Reviews", "Others"],
	"description": "",
	"content": "객체지향를 정확하게 구현하고자 오브젝트 라는 책을 구입하였다. 구입하게 된 계기는 우아한형제들 기술블로그에서 신입 개발자의 적응기를 보았다. 자신의 선배가 추천한 책이라고 하였고, 실제로도 많은 도움을 받았다는 후기를 봤다. 웹서핑을 하며 돌아다니다 오브젝트 책에 관한 후기도 몇 개 보기도 하였고 하여 바로 구입!!\n\n🐸 나를 괴롭히는 객체지향 객체지향, 학원에서 수강을 할 때 가장 재미있었던 개념이었다. 객체가 상태(field)와 행동(method)을 갖고 있다! 얼마나 간단한가. 숙제로 나온 구슬치기게임(가위바위보와 같은..)을 자바로 쉽게 구현해보기도 하였고 수업시간 동안 어렵다라는 느낌을 받은 적이 없었다.\n그런데 카페주문시스템 프로젝트를 하며 당황했다. 객체의 범위를 어디까지 만들어야하는지 명확한 기준이 세워지지 않았다. 일단 만들어보자! 라는 생각을 하여 객체 하나에 주문클래스를 구현하였고\u0026hellip;. 프로젝트가 끝날 때까지 리팩토링을 하지 못한 채 하나의 클래스로 만들어버렸다\u0026hellip; :scream: 무려 500줄\u0026hellip;. 엄청난 뎁스의 메서드들\u0026hellip;.. 그때부터였다. 객체지향이 어려운게 책임과 역할을 객체에 잘 분배하기 어렵다는 것임을. 끝까지 내가 쫓아가야 할 존재임을.\n이러저러한 이유로 오브젝트를 보게 되었고, 다 읽지 못하였지만 지금까지 받은 느낌은 \u0026lsquo;어떻게 이렇게 쉽게 설명할 수 있을까? 멋있다.. 신기하다..\u0026rsquo; 이다. 아직 고급단계의 개발자는 아니지만, 저자의 \u0026lsquo;객체지향\u0026rsquo;에 대한 고민과 탐구 흐름, 그 결과를 문장 사이사이에서 느낄 수 있다. 한줄 한줄이 깨알같다고나 할까\u0026hellip; 조금 더 지나서 읽는다면 더 공감되는 부분이 많을 것 같다.\n\n4장: 캡슐화 지키기, 낮은 결합도와 높은 응집도로   캡슐화란 변할 수 있는 어떤 것이라도 감추는 것\n  **파급효과(ripple effect)**를 조심해야 한다.\nDiscountCondition을 변경하면 Movie, Screening, Reservation Agency 까지 변경하는 상황이 발생한다.\n  객체는 역할과 책임을 갖고있다. 상태와 행동은 field와 method로 구현됨.\n  설계의 무게가 외부로 향해야 한다. 즉, 객체간 협력하는 방법에 대해 고민해야 한다.\n  낮은 결합도를 만들자\n DiscountCondition 의 구현에 속하는 부분(명칭이 변경되거나 종류가 추가되거나 조건절을 충족하는 필요 정보가 변경될 때 등)은 Movie가 아니라 DiscountCondition에서 구현해야 한다.    의존성을 낮춰야 한다. 제어 로직이 한 객체 안에 밀집되면 안된다.\n  이런 문제가 발생하는 이유 ? 데이터 중심의 설계 때문 !\n 데이터 결정 시기가 빠르다. 객체를 단순한 데이터의 집합체라 생각하게 된다. 오퍼레이션이 고립된다. 접근자와 수정자(getter setter)를 과도하게 남발하고, 내부 구현 내용을 인터페이스를 통해 외부로 그대로 노출한다.    \n5장: 책임 할당하기  책임 중심의 코드를 만들기 : 데이터보다 행동을, \u0026lsquo;협력\u0026rsquo;이라는 문맥 안에서 책임 결정하기 어떤 객체에게 어떤 책임을 줄 지, 즉 트레이드오프 할당방법은 그때그때 다르다. 상황과 문맥에 따라 천차만별 GRASP 패턴 : 가장 기본적인 패턴방법.  \n 참고  GRASP 패턴에 대해 잘 정리해놓은 블로그 - neosy Blog  "
},
{
	"uri": "https://mand2.github.io/categories/books/",
	"title": "Books",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/reviews/",
	"title": "Reviews",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/spring-boot/",
	"title": "Spring Boot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/tags/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/categories/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://mand2.github.io/series/",
	"title": "Series",
	"tags": [],
	"description": "",
	"content": ""
}]