<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 고라니의 개발일기🦌</title>
    <link>https://mand2.github.io/tags/java/</link>
    <description>Recent content in Java on 고라니의 개발일기🦌</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 02 Sep 2021 22:53:31 +0900</lastBuildDate><atom:link href="https://mand2.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[AWS S3] 로컬 디렉토리에 있는 모든 파일 S3로 업로드하기</title>
      <link>https://mand2.github.io/til/aws_s3_%EB%A1%9C%EC%BB%AC%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC_%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 02 Sep 2021 22:53:31 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/aws_s3_%EB%A1%9C%EC%BB%AC%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC_%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0/</guid>
      <description>로컬에 있는 특정 파일(디렉토리) 안에 있는 모든 파일들을 s3로 옮기는 작업을 진행하는 코드를 코틀린으로 만들어보자 🚀
처음으로 코틀린으로 작성해본거라 코딩 컨벤션에 맞지 않을 수 있다 😅
aws 깃허브를 많이 참고하였고, 해당 참고했던 깃허브는 java 언어를 보고 참고하였다.
참고했던 자료들은 이 글 제일 하단에 있다.
전제조건은 다음과 같다.
1. 전제조건  gradle kotlin jdk : aws-correto-11 (aws 오픈소스) 로컬 파일 구조
|&amp;ndash; d
|&amp;ndash; test
|&amp;ndash; uploader AWS 버킷 생성 완료 + public 으로 전환  2.</description>
    </item>
    
    <item>
      <title>Java 형식으로 AWS SQS에 메세지 보내기</title>
      <link>https://mand2.github.io/til/send-messages-to-sqs-by-java/</link>
      <pubDate>Mon, 16 Aug 2021 01:40:33 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/send-messages-to-sqs-by-java/</guid>
      <description>오랜만에 쓰는 블로그 글이다. 이것 저것 이슈로 블로그를 방치해 두었었는데, 이제서야 한번 다시 돌아보는 나의 블로그&amp;hellip; 😂 오늘의 주제는 &amp;lsquo;Java 형식으로 AWS SQS에 메세지 보내기&amp;lsquo;다
사용자(User)가 주문을 하면 backend-api 쪽에서 주문 등록을 하고, 사장님에게 &amp;lsquo;주문이 되었습니다&amp;rsquo;라는 알람과 함께 주문내역 메세지를 보내는 시스템을 구현했다고 가정해보자 (가정일 뿐이다. 주문 관련 업무를 설계해 본 적은 없다. 설명하기 쉽게 가정을 했을 뿐😅 주문 내역을 만들 때 batch를 쓸 수도 있고 큐를 안 쓰고 API를 바로 호출 할 수도 있고.</description>
    </item>
    
    <item>
      <title>자바 형변환 안전하게 하기</title>
      <link>https://mand2.github.io/til/java-str-to-double/</link>
      <pubDate>Thu, 03 Sep 2020 22:39:54 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/java-str-to-double/</guid>
      <description>형변환 할 때마다 참 고민이다.
long -&amp;gt; int 형변환은 쉽게 java.lang.Math.toIntExtract(long value)을 이용하면 된다지만, 그 외의 형변환을 할 때 &amp;lt;지금 내가 사용하는 게 정말 안전한 방법&amp;gt;인지 궁금해졌다. 어떻게 하면 더 안전하게 형변환 할 수 있을지 궁금해서 찾아본 안전하게 형변환하는 방법.
다른 예도 많지만 String에서 double로 형변환 하는 방법을 들어보겠다. new Double(&amp;ldquo;1.23&amp;rdquo;) 와 같이 Double을 새로 만들어서 사용하는 건 Java 9부터 deprecated 되었다. 지양할 것.
형변환을 도와주는 메서드 자바에서 형변환을 도와주는 메서드는 크게 세 가지로 볼 수 있다.</description>
    </item>
    
    <item>
      <title>컬렉션 프레임워크의 정의와 stream 사용법 간단 정리</title>
      <link>https://mand2.github.io/til/collection-framework/</link>
      <pubDate>Wed, 30 Oct 2019 18:58:29 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/collection-framework/</guid>
      <description>최근, 알고리즘 문제를 풀 때 (링크  ) 다른 사람의 문제풀이에서 stream()을 사용한 풀이가 있었다. 그동안 stackOverFlow에서나, 다른 레퍼런스 문서 등에서 가끔 보던 형식이었다. 그 땐 이 형식이 람다식으로 만들어진 줄도 몰랐다. 내 기억상 음,, 이건 다른 언어에서 쓰는건가? 하고 넘겼던 듯. 이번 문제풀이를 통해 컬렉션과 람다식에 대해 꼼꼼히 배울 수 있는 계기가 되었다고 생각하고, 간단히 정리를 해 보려고 한다. 아래는 내가 보았던 식이다.
return list.stream().mapToInt(i-&amp;gt;i.intValue()).toArray(); 이 뜻은
 list를 스트림으로 만들고, int 형식으로 변환 후 다시 배열로 바로 반환  한다는 뜻이다.</description>
    </item>
    
  </channel>
</rss>
