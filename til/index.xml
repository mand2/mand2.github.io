<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TIL on 고라니의 개발일기🦌</title>
    <link>https://mand2.github.io/til/</link>
    <description>Recent content in TIL on 고라니의 개발일기🦌</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 30 Aug 2020 02:03:22 +0900</lastBuildDate><atom:link href="https://mand2.github.io/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[AWS S3] 로컬 디렉토리에 있는 모든 파일 S3로 업로드하기</title>
      <link>https://mand2.github.io/til/aws_s3_%EB%A1%9C%EC%BB%AC%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC_%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 02 Sep 2021 22:53:31 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/aws_s3_%EB%A1%9C%EC%BB%AC%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC_%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0/</guid>
      <description>로컬에 있는 특정 파일(디렉토리) 안에 있는 모든 파일들을 s3로 옮기는 작업을 진행하는 코드를 코틀린으로 만들어보자 🚀
처음으로 코틀린으로 작성해본거라 코딩 컨벤션에 맞지 않을 수 있다 😅
aws 깃허브를 많이 참고하였고, 해당 참고했던 깃허브는 java 언어를 보고 참고하였다.
참고했던 자료들은 이 글 제일 하단에 있다.
전제조건은 다음과 같다.
1. 전제조건  gradle kotlin jdk : aws-correto-11 (aws 오픈소스) 로컬 파일 구조
|&amp;ndash; d
|&amp;ndash; test
|&amp;ndash; uploader AWS 버킷 생성 완료 + public 으로 전환  2.</description>
    </item>
    
    <item>
      <title>아나콘다 주피터 노트북 시작폴더 위치 바꾸기</title>
      <link>https://mand2.github.io/til/%EC%95%84%EB%82%98%EC%BD%98%EB%8B%A4_%EC%A3%BC%ED%94%BC%ED%84%B0_%EB%85%B8%ED%8A%B8%EB%B6%81_%EC%8B%9C%EC%9E%91%ED%8F%B4%EB%8D%94_%EC%9C%84%EC%B9%98_%EB%B0%94%EA%BE%B8%EA%B8%B0/</link>
      <pubDate>Wed, 25 Aug 2021 23:38:21 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/%EC%95%84%EB%82%98%EC%BD%98%EB%8B%A4_%EC%A3%BC%ED%94%BC%ED%84%B0_%EB%85%B8%ED%8A%B8%EB%B6%81_%EC%8B%9C%EC%9E%91%ED%8F%B4%EB%8D%94_%EC%9C%84%EC%B9%98_%EB%B0%94%EA%BE%B8%EA%B8%B0/</guid>
      <description>주피터 노트북을 직접 설치하지 않은 사람이 시작 폴더 바꾸려면?
 오늘의 주제는 주피터 노트북을 직접 설치하지 않은 사람이 시작 폴더 바꾸려면? 이다.
jupyter notebook의 기본 폴더는 C:\Users\{사용자명} 에 위치해 있는데, 외장하드(/d/) 폴더를 자주 쓰는 나로서는 너무 불편했다.
일반 cmd 나 powershell 혹은 terminal 에서 아무리 열심히 jupyter notebook 쳐도 명령어 없음으로 떴다. 아니 다른 기술 블로그엔 잘만 나오는데 왜 없어&amp;hellip;🤦‍♀️ 하며 가상환경 관리한다고 아나콘다만 설치했던 걸 까먹었었다. 검색하면 jupyter notebook 도 같이 나오니까 당연히 개별로 설치된 건줄 알았지&amp;hellip; anaconda에 종속된 jupyter notebook 이었을 줄이야.</description>
    </item>
    
    <item>
      <title>Java 형식으로 AWS SQS에 메세지 보내기</title>
      <link>https://mand2.github.io/til/send-messages-to-sqs-by-java/</link>
      <pubDate>Mon, 16 Aug 2021 01:40:33 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/send-messages-to-sqs-by-java/</guid>
      <description>오랜만에 쓰는 블로그 글이다. 이것 저것 이슈로 블로그를 방치해 두었었는데, 이제서야 한번 다시 돌아보는 나의 블로그&amp;hellip; 😂 오늘의 주제는 &amp;lsquo;Java 형식으로 AWS SQS에 메세지 보내기&amp;lsquo;다
사용자(User)가 주문을 하면 backend-api 쪽에서 주문 등록을 하고, 사장님에게 &amp;lsquo;주문이 되었습니다&amp;rsquo;라는 알람과 함께 주문내역 메세지를 보내는 시스템을 구현했다고 가정해보자 (가정일 뿐이다. 주문 관련 업무를 설계해 본 적은 없다. 설명하기 쉽게 가정을 했을 뿐😅 주문 내역을 만들 때 batch를 쓸 수도 있고 큐를 안 쓰고 API를 바로 호출 할 수도 있고.</description>
    </item>
    
    <item>
      <title>Git 커밋 그래프(contribution graph)를 3D로 보는 방법</title>
      <link>https://mand2.github.io/til/show-git-contribute-in-3d/</link>
      <pubDate>Wed, 09 Sep 2020 00:02:15 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/show-git-contribute-in-3d/</guid>
      <description>깃 커밋 그래프를 볼 때마다 색상으로만 판단하기 어려울 때가 있다. 사람마다 얼마나 자주, 얼만큼 많이 하느냐에 따라 색상의 농도가 달라지기 때문이다.
실제로 얼마나 많이 했는지 그 크기를 같이 보고 싶었는데,
언젠가의 기억에, &amp;lt;3D 그래프로 볼 수 있다~&amp;gt; 라는 내용의 포스팅을 봤었던 기억이 나서 찾아봤다.
간단하게 정리하자면 구글 플러그인  만 깔면 해결된다. github.com에서만 활성화 로 세팅하면 아래와 같이 나온다😎
아래는 예시 이미지일뿐 내 깃헙 contributioin이 이랬으면 소원이 없겠다 ㅎ
또 깃 커밋 관련 통계를 볼 수 있어서 플러그인을 잘 깔았다고 생각하게 한다👍</description>
    </item>
    
    <item>
      <title>자바 형변환 안전하게 하기</title>
      <link>https://mand2.github.io/til/java-str-to-double/</link>
      <pubDate>Thu, 03 Sep 2020 22:39:54 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/java-str-to-double/</guid>
      <description>형변환 할 때마다 참 고민이다.
long -&amp;gt; int 형변환은 쉽게 java.lang.Math.toIntExtract(long value)을 이용하면 된다지만, 그 외의 형변환을 할 때 &amp;lt;지금 내가 사용하는 게 정말 안전한 방법&amp;gt;인지 궁금해졌다. 어떻게 하면 더 안전하게 형변환 할 수 있을지 궁금해서 찾아본 안전하게 형변환하는 방법.
다른 예도 많지만 String에서 double로 형변환 하는 방법을 들어보겠다. new Double(&amp;ldquo;1.23&amp;rdquo;) 와 같이 Double을 새로 만들어서 사용하는 건 Java 9부터 deprecated 되었다. 지양할 것.
형변환을 도와주는 메서드 자바에서 형변환을 도와주는 메서드는 크게 세 가지로 볼 수 있다.</description>
    </item>
    
    <item>
      <title>자바스크립트로 AWS autoscaling group 정보 가져오기</title>
      <link>https://mand2.github.io/til/get-autoscaling-by-js/</link>
      <pubDate>Wed, 02 Sep 2020 22:35:44 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/get-autoscaling-by-js/</guid>
      <description>각 리전의 인스턴스를 컨트롤하는 람다를 유지보수하는 일을 맡았다. 일단 리전 하나에서 관리하는 것도 충분히 힘들지만, 여러 리전에서 관리를 하다니&amp;hellip; 같이 일하시는 분들이 대단해 보인다. 다들 기억력이 정말 좋으신듯 ㅠ_ㅠ 리전 하나당 관리하는 인스턴스 종류도 여러가지인데 꼼꼼하셔서 큰 사고없이 잘 유지중인 것 같다.
아무튼 각설하고, 오늘의 주제는 AWS autoScalingGroup 정보 가져오기 by. javascript.
AWS에서는 SDK라고 해서 aws 관련한 모든 것에 접근할 수 있는 라이브러리를 제공한다. 평소에는 java-sdk로 aws에 접근하지만, 이번에는 람다용으로 개발할 거라서 javascript-sdk 용으로 설명한다.</description>
    </item>
    
    <item>
      <title>블로그 커밋 메세지 만들고 자동 배포 하기</title>
      <link>https://mand2.github.io/til/blog-auto-commit/</link>
      <pubDate>Mon, 31 Aug 2020 19:36:11 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/blog-auto-commit/</guid>
      <description>정말 짧은 기간이긴 하지만, Hugo 테마로 블로그를 구축하다 보니 git commit 하기가 귀찮아졌다.
회사에서는 웬만하면 git 커맨드로 직접 push 하는 스타일이긴 한데, 이렇게 자주 수정하고 push를 여러 단계에 걸쳐서 하는 건 아니라서💦 더 귀찮아진 느낌이다.
결국 배포 자동화 하는 쉘스크립트를 작성하였다.
기본적인 뼈대는 한정수님 블로그  의 README.md에서 참고하였다. 그냥 커밋 메세지를 똑같이 auto commit!으로 하기엔 넘 멋없어 보여서 커밋 메세지를 따로 입력받아 처리하였다. 쉘스크립트를 호출하면서 커밋메세지를 받아올 수도 있지만, 그렇게 하면 순간적으로 오타가 날 수도 있고 다른 내용을 작성하고 싶기도 해서 관리하기 쉽게 커밋 메세지용 파일을 따로 만들어 두었다.</description>
    </item>
    
    <item>
      <title>Maven pom.xml 빌드 플러그인 세팅하기</title>
      <link>https://mand2.github.io/til/build-plugs-of-maven/</link>
      <pubDate>Tue, 21 Jan 2020 07:24:52 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/build-plugs-of-maven/</guid>
      <description>작성한 코드를 라이브러리 형식으로 만들기 위해 .jar 파일로 만들었다. 내가 세팅한 버전 등에 맞게 내보내기 위해 + 설정한 dependency 까지 보내주기 위하여 설정하였다.
스펙
 intellij JDK 1.8 maven 4.0.0  그전에 앞서, apache maven project 사이트에서 말하는 최소 사양은 다음과 같다.
 Maven 3.0 이상 JDK 1.7 이상  Q. pom.xml에 사용한 dependency를 어떻게 내보내야 하는가? 두 가지 버전이 있다.
  maven-assembly-plugin 사용: 내부에 전 dependency를 저장하여 보내주기 때문에 용량이 크다.</description>
    </item>
    
    <item>
      <title>DB index의 정의</title>
      <link>https://mand2.github.io/til/definition-db-index/</link>
      <pubDate>Thu, 19 Dec 2019 18:20:06 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/definition-db-index/</guid>
      <description>What is index? USAGE 1 : Support for fast Lookup
An index is any data structure that improves the performance of lookup. There are many different data structures  used for this purpose. There are complex design trade-offs involving lookup performance, index size, and index-update performance. Many index designs exhibit logarithmic (O(log(N)) lookup performance and in some applications it is possible to achieve flat (O(1)) performance.
USAGE 2 : Policing the database constraints (I assumed it as a DB table guideline)</description>
    </item>
    
    <item>
      <title>컬렉션 프레임워크의 정의와 stream 사용법 간단 정리</title>
      <link>https://mand2.github.io/til/collection-framework/</link>
      <pubDate>Wed, 30 Oct 2019 18:58:29 +0900</pubDate>
      
      <guid>https://mand2.github.io/til/collection-framework/</guid>
      <description>최근, 알고리즘 문제를 풀 때 (링크  ) 다른 사람의 문제풀이에서 stream()을 사용한 풀이가 있었다. 그동안 stackOverFlow에서나, 다른 레퍼런스 문서 등에서 가끔 보던 형식이었다. 그 땐 이 형식이 람다식으로 만들어진 줄도 몰랐다. 내 기억상 음,, 이건 다른 언어에서 쓰는건가? 하고 넘겼던 듯. 이번 문제풀이를 통해 컬렉션과 람다식에 대해 꼼꼼히 배울 수 있는 계기가 되었다고 생각하고, 간단히 정리를 해 보려고 한다. 아래는 내가 보았던 식이다.
return list.stream().mapToInt(i-&amp;gt;i.intValue()).toArray(); 이 뜻은
 list를 스트림으로 만들고, int 형식으로 변환 후 다시 배열로 바로 반환  한다는 뜻이다.</description>
    </item>
    
  </channel>
</rss>
